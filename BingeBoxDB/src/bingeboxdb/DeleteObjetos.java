/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bingeboxdb;

import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.query.Query;

/**
 *
 * @author Armando
 */
public class DeleteObjetos extends javax.swing.JFrame {

    /**
     * Creates new form DeleteObjetos
     */
    public DeleteObjetos() {
        this.setSize(800, 600);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        int x = (screenSize.width - this.getWidth()) / 2;
        int y = (screenSize.height - this.getHeight()) / 2;

        this.setLocation(x, y);
        setTitle("BingeBox DB - Delete");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jButtonUpdate = new javax.swing.JButton();
        jButtonVolver = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButtonActors = new javax.swing.JButton();
        jButtonPeliculas = new javax.swing.JButton();
        jButtonSeries = new javax.swing.JButton();
        jButtonDirectors = new javax.swing.JButton();
        jButtonTemporadas = new javax.swing.JButton();
        jButtonCapitulos = new javax.swing.JButton();
        jButtonCreadorSerie = new javax.swing.JButton();
        jButtonDireccionPelicula = new javax.swing.JButton();
        jButtonParticipacionActorPel = new javax.swing.JButton();
        jButtonParticipacionActorSerie = new javax.swing.JButton();
        jButtonCreacionSeries = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel3.setBackground(new java.awt.Color(204, 0, 51));
        jPanel3.setForeground(new java.awt.Color(153, 0, 0));

        jButtonSave.setBackground(new java.awt.Color(102, 0, 0));
        jButtonSave.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonSave.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSave.setText("SAVE");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jButtonUpdate.setBackground(new java.awt.Color(102, 0, 0));
        jButtonUpdate.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jButtonUpdate.setForeground(new java.awt.Color(255, 255, 255));
        jButtonUpdate.setText("UPDATE");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonVolver.setBackground(new java.awt.Color(102, 0, 0));
        jButtonVolver.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jButtonVolver.setForeground(new java.awt.Color(255, 255, 255));
        jButtonVolver.setText("VOLVER");
        jButtonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonVolver, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(159, 159, 159)
                .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jButtonVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 0, 51));

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("D E L E T E");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(163, 163, 163)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(204, 255, 255));

        jButtonActors.setBackground(new java.awt.Color(102, 0, 0));
        jButtonActors.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonActors.setForeground(new java.awt.Color(255, 255, 255));
        jButtonActors.setText("Actors");
        jButtonActors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActorsActionPerformed(evt);
            }
        });

        jButtonPeliculas.setBackground(new java.awt.Color(102, 0, 0));
        jButtonPeliculas.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonPeliculas.setForeground(new java.awt.Color(255, 255, 255));
        jButtonPeliculas.setText("Peliculas");
        jButtonPeliculas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPeliculasActionPerformed(evt);
            }
        });

        jButtonSeries.setBackground(new java.awt.Color(102, 0, 0));
        jButtonSeries.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonSeries.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSeries.setText("Series");
        jButtonSeries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSeriesActionPerformed(evt);
            }
        });

        jButtonDirectors.setBackground(new java.awt.Color(102, 0, 0));
        jButtonDirectors.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonDirectors.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDirectors.setText("Directors");
        jButtonDirectors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDirectorsActionPerformed(evt);
            }
        });

        jButtonTemporadas.setBackground(new java.awt.Color(102, 0, 0));
        jButtonTemporadas.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonTemporadas.setForeground(new java.awt.Color(255, 255, 255));
        jButtonTemporadas.setText("Temporadas");
        jButtonTemporadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTemporadasActionPerformed(evt);
            }
        });

        jButtonCapitulos.setBackground(new java.awt.Color(102, 0, 0));
        jButtonCapitulos.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonCapitulos.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCapitulos.setText("Capitulos");
        jButtonCapitulos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCapitulosActionPerformed(evt);
            }
        });

        jButtonCreadorSerie.setBackground(new java.awt.Color(102, 0, 0));
        jButtonCreadorSerie.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonCreadorSerie.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCreadorSerie.setText("Creador");
        jButtonCreadorSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreadorSerieActionPerformed(evt);
            }
        });

        jButtonDireccionPelicula.setBackground(new java.awt.Color(102, 0, 0));
        jButtonDireccionPelicula.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonDireccionPelicula.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDireccionPelicula.setText("Direccion pelicula");
        jButtonDireccionPelicula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDireccionPeliculaActionPerformed(evt);
            }
        });

        jButtonParticipacionActorPel.setBackground(new java.awt.Color(102, 0, 0));
        jButtonParticipacionActorPel.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonParticipacionActorPel.setForeground(new java.awt.Color(255, 255, 255));
        jButtonParticipacionActorPel.setText("P. Actor Película");
        jButtonParticipacionActorPel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParticipacionActorPelActionPerformed(evt);
            }
        });

        jButtonParticipacionActorSerie.setBackground(new java.awt.Color(102, 0, 0));
        jButtonParticipacionActorSerie.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonParticipacionActorSerie.setForeground(new java.awt.Color(255, 255, 255));
        jButtonParticipacionActorSerie.setText("P. Actor Serie");
        jButtonParticipacionActorSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParticipacionActorSerieActionPerformed(evt);
            }
        });

        jButtonCreacionSeries.setBackground(new java.awt.Color(102, 0, 0));
        jButtonCreacionSeries.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonCreacionSeries.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCreacionSeries.setText("Creacion series");
        jButtonCreacionSeries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreacionSeriesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonPeliculas, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(108, 108, 108)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonCreadorSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonCapitulos, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(216, 216, 216))
                            .addComponent(jButtonDireccionPelicula))
                        .addContainerGap(106, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonActors, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(108, 108, 108)
                        .addComponent(jButtonTemporadas, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonParticipacionActorSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonParticipacionActorPel)
                            .addComponent(jButtonCreacionSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonActors, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTemporadas, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonParticipacionActorPel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPeliculas, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCapitulos, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonParticipacionActorSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCreadorSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreacionSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDireccionPelicula, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // B O T O N  S A V E
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        InsertarObjetos interfaz = new InsertarObjetos();
        interfaz.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButtonSaveActionPerformed
    // B O T O N  U P D A T E
    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        UpdateObjetos interfaz = new UpdateObjetos();
        interfaz.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButtonUpdateActionPerformed
    // B O T O N  D E L E T E
    private void jButtonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverActionPerformed
        InterfazHibernate interfaz = new InterfazHibernate();
        interfaz.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButtonVolverActionPerformed
    // B O T O N  D E L E T E  E N  A C T O R S
    private void jButtonActorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActorsActionPerformed
        eliminarActor();
    }//GEN-LAST:event_jButtonActorsActionPerformed
    // B O T O N  D E L E T E  E N  P E L I C U L A S
    private void jButtonPeliculasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPeliculasActionPerformed
        eliminarPelicula();
    }//GEN-LAST:event_jButtonPeliculasActionPerformed
    // B O T O N  D E L E T E  E N  S E R I E S
    private void jButtonSeriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSeriesActionPerformed
        eliminarSeries();
    }//GEN-LAST:event_jButtonSeriesActionPerformed
    // B O T O N  D E L E T E  E N  D I R E C T O R S
    private void jButtonDirectorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDirectorsActionPerformed
        eliminarDirectors();
    }//GEN-LAST:event_jButtonDirectorsActionPerformed
    // B O T O N  D E L E T E  E N  T E M P O R A D A S
    private void jButtonTemporadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTemporadasActionPerformed
        eliminarTemporadas();
    }//GEN-LAST:event_jButtonTemporadasActionPerformed
    // B O T O N  D E L E T E  E N  C A P I T U L O S
    private void jButtonCapitulosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCapitulosActionPerformed
        eliminarCapitulos();
    }//GEN-LAST:event_jButtonCapitulosActionPerformed
    // B O T O N  D E L E T E  E N  C R E A D O R  S E R I E
    private void jButtonCreadorSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreadorSerieActionPerformed
        eliminarCreadorSerie();
    }//GEN-LAST:event_jButtonCreadorSerieActionPerformed
    // B O T O N  D E L E T E  E N  D I R E C C I O N  P E L I C U L A
    private void jButtonDireccionPeliculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDireccionPeliculaActionPerformed
        deleteDireccionPelicula();
    }//GEN-LAST:event_jButtonDireccionPeliculaActionPerformed
    // B O T O N  D E L E T E  E N  P A R T I C I P A C I O N  A C T O R  P E L I C U L A
    private void jButtonParticipacionActorPelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonParticipacionActorPelActionPerformed
        deletePActorPelicula();
    }//GEN-LAST:event_jButtonParticipacionActorPelActionPerformed
    // B O T O N  D E L E T E  E N  P A R T I C I P A C I O N  A C T O R  S E R I E
    private void jButtonParticipacionActorSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonParticipacionActorSerieActionPerformed
        deletePActorSerie();
    }//GEN-LAST:event_jButtonParticipacionActorSerieActionPerformed
    // B O T O N  D E L E T E  E N  C R E A C I O N  S E R I E S
    private void jButtonCreacionSeriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreacionSeriesActionPerformed
        deleteCreacionSeries();
    }//GEN-LAST:event_jButtonCreacionSeriesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DeleteObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DeleteObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DeleteObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DeleteObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeleteObjetos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActors;
    private javax.swing.JButton jButtonCapitulos;
    private javax.swing.JButton jButtonCreacionSeries;
    private javax.swing.JButton jButtonCreadorSerie;
    private javax.swing.JButton jButtonDireccionPelicula;
    private javax.swing.JButton jButtonDirectors;
    private javax.swing.JButton jButtonParticipacionActorPel;
    private javax.swing.JButton jButtonParticipacionActorSerie;
    private javax.swing.JButton jButtonPeliculas;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSeries;
    private javax.swing.JButton jButtonTemporadas;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JButton jButtonVolver;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
    // M E T O D O S  P A R A  D E L E T E

    // M E T O D O  E L I M I N A R  A C T O R
    private void eliminarActor() {
        try {
            // Creamos un SessionFactory en la clase de Actors.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Actors_NaM.class)
                    .addAnnotatedClass(Participacion_Actor_Serie.class)
                    .addAnnotatedClass(Participacion_Actor_Pelicula.class)
                    .buildSessionFactory();
            Session session = instancia.openSession();

            // Uso JOptionPane para leer el ID del actor que deseo eliminar.
            String idStr = JOptionPane.showInputDialog("Introduce el ID del actor que deseas eliminar:");
            Integer id_actor = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    id_actor = Integer.parseInt(idStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un número válido para el ID.");
                    idStr = JOptionPane.showInputDialog("Introduce el ID del actor que deseas eliminar:");
                }
            }

            session.beginTransaction();

            // Buscamos el objeto que contenga ese ID.
            Actors_NaM actor = session.get(Actors_NaM.class, id_actor);

            if (actor != null) {
                // Eliminamos los registros dependientes en participacion_actor_serie primero.
                Query query1 = session.createQuery("DELETE FROM Participacion_Actor_Serie WHERE actors_id = :actorId");
                query1.setParameter("actorId", id_actor);
                query1.executeUpdate();

                // Eliminar registros dependientes en participacion_actor_pelicula, después.
                Query query2 = session.createQuery("DELETE FROM Participacion_Actor_Pelicula WHERE actors_id = :actorId");
                query2.setParameter("actorId", id_actor);
                query2.executeUpdate();

                // Ahora eliminamos el actor en cuestión.
                session.delete(actor);
                JOptionPane.showMessageDialog(null, "Registro eliminado de la tabla Actors");
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró ningún actor con el ID.");
            }

            session.getTransaction().commit();
        } catch (HibernateException he) {
            System.out.println(he);
        }

    }

    // M E T O D O  E L I M I N A R  P E L I C U L A
    private void eliminarPelicula() {
        try {
            // Creamos un SessionFactory en la clase de Peliculas.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Peliculas_NaM.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Uso JOptionPane para leer el ID de la película que deseo eliminar.
            String idStr = JOptionPane.showInputDialog("Introduce el ID de la película que deseas eliminar:");
            Integer id_pelicula = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    id_pelicula = Integer.parseInt(idStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un número válido para el ID.");
                    idStr = JOptionPane.showInputDialog("Introduce el ID de la película que deseas eliminar:");
                }
            }

            session.beginTransaction();

            // Se busca el objeto al que queremos hacer referencia.
            Peliculas_NaM pelicula = session.get(Peliculas_NaM.class, id_pelicula);

            if (pelicula != null) {
                // Eliminamos los registros dependientes en participacion_actor_pelicula antes que la propia película.
                Query query = session.createQuery("DELETE FROM Participacion_Actor_Pelicula WHERE peliculas_id = :peliculaId");
                query.setParameter("peliculaId", id_pelicula);
                int result = query.executeUpdate();

                // Eliminamos la película.
                session.delete(pelicula);
                JOptionPane.showMessageDialog(null, "Registro eliminado de la tabla Peliculas");
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró ninguna película con el ID.");
            }

            session.getTransaction().commit();
        } catch (HibernateException he) {
            System.out.println(he);
        }

    }

    // M E T O D O  E L I M I N A R  S E R I E S
    private void eliminarSeries() {
        try {
            // Creamos un SessionFactory en la clase de Series.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Series_1aN.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Uso JOptionPane para leer el ID de la serie en cuestión que deseo eliminar.
            String idStr = JOptionPane.showInputDialog("Introduce el ID de la serie que deseas eliminar:");
            Integer id_serie = null;
            boolean validInput = false;

            // El ID de la serie debe de ser válido.
            while (!validInput) {
                try {
                    id_serie = Integer.parseInt(idStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un número válido para el ID.");
                    idStr = JOptionPane.showInputDialog("Introduce el ID de la serie que deseas eliminar:");
                }
            }

            session.beginTransaction();

            // Busco la serie a la que hago referencia con el ID de esta misma.
            Series_1aN serie = session.get(Series_1aN.class, id_serie);

            if (serie != null) {
                // Si se encuentra una serie con ese ID, se elimina de la base de datos.
                session.delete(serie);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro eliminado de la tabla Series");
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró ninguna serie con el ID.");
            }

        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error al eliminar la serie.");
        }

    }

    // M E T O D O  E L I M I N A R  D I R E C T O R
    private void eliminarDirectors() {
        try {
            // Creamos un SessionFactory en la clase de Directors.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Directors_NaM.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Uso JOptionPane para leer el ID del director en cuestión que deseo eliminar.
            String idStr = JOptionPane.showInputDialog("Introduce el ID del director que deseas eliminar:");
            Integer id_director = null;
            boolean validInput = false;

            // El ID del director debe de ser válido.
            while (!validInput) {
                try {
                    id_director = Integer.parseInt(idStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un número válido para el ID.");
                    idStr = JOptionPane.showInputDialog("Introduce el ID del director que deseas eliminar:");
                }
            }

            session.beginTransaction();

            // Busco el director al que hago referencia con el ID de este mismo.
            Directors_NaM director = session.get(Directors_NaM.class, id_director);

            if (director != null) {
                session.delete(director);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro eliminado de la tabla Directors");
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró ningún director con el ID.");
            }

        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error al eliminar el director.");
        }

    }

    // M E T O D O  E L I M I N A R  T E M P O R A D A
    private void eliminarTemporadas() {
        try {
            // Creamos un SessionFactory en la clase de Temporadas.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Temporadas_1aN.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Uso JOptionPane para leer el ID de la temporada en cuestión que deseo eliminar.
            String idStr = JOptionPane.showInputDialog("Introduce el ID de la temporada que deseas eliminar:");
            Integer id_temporada = null;
            boolean validInput = false;

            // El ID de la temporada debe de ser válido.
            while (!validInput) {
                try {
                    id_temporada = Integer.parseInt(idStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un número válido para el ID.");
                    idStr = JOptionPane.showInputDialog("Introduce el ID de la temporada que deseas eliminar:");
                }
            }

            session.beginTransaction();

            // Busco la temporada a la que hago referencia con el ID de esta.
            Temporadas_1aN temporada = session.get(Temporadas_1aN.class, id_temporada);

            if (temporada != null) {
                session.delete(temporada);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro eliminado de la tabla Temporadas");
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró ninguna temporada con el ID.");
            }

        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error al eliminar la temporada.");
        }

    }

    // M E T O D O  E L I M I N A R  C A P I T U L O S
    private void eliminarCapitulos() {
        try {
            // Creamos un SessionFactory en la clase de Capitulos.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Capitulos.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Uso JOptionPane para leer el ID del capítulo en cuestión que deseo eliminar.
            String idStr = JOptionPane.showInputDialog("Introduce el ID del capítulo que deseas eliminar:");
            Integer id_capitulo = null;
            boolean validInput = false;

            // El ID del capítulo debe de ser válido.
            while (!validInput) {
                try {
                    id_capitulo = Integer.parseInt(idStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un número válido para el ID.");
                    idStr = JOptionPane.showInputDialog("Introduce el ID del capítulo que deseas eliminar:");
                }
            }

            session.beginTransaction();

            // Busco el capítulo al que hago referencia con el ID de este mismo.
            Capitulos capitulo = session.get(Capitulos.class, id_capitulo);

            if (capitulo != null) {
                session.delete(capitulo);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro eliminado de la tabla Capitulos");
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró ningún capítulo con el ID.");
            }

        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error al eliminar el capítulo.");
        }

    }

    // M E T O D O  E L I M I N A R  C R E A D O R  S E R I E
    private void eliminarCreadorSerie() {
        try {
            // Creamos un SessionFactory en la clase de Creador_Serie.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Creador_Serie_NaM.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Uso JOptionPane para leer el ID del creador de la serie en cuestión que deseo eliminar.
            String idStr = JOptionPane.showInputDialog("Introduce el ID del creador que deseas eliminar:");
            Integer id_creadorserie = null;
            boolean validInput = false;

            // El ID del creador debe de ser válido.
            while (!validInput) {
                try {
                    id_creadorserie = Integer.parseInt(idStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un número válido para el ID.");
                    idStr = JOptionPane.showInputDialog("Introduce el ID del creador que deseas eliminar:");
                }
            }

            session.beginTransaction();

            // Buscamos el creador de la serie utilizando el ID proporcionado.
            Creador_Serie_NaM creador = session.get(Creador_Serie_NaM.class, id_creadorserie);

            if (creador != null) {
                session.delete(creador);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro eliminado de la tabla Creador_Serie");
            } else {
                JOptionPane.showMessageDialog(null, "No se encontró ningún creador con el ID.");
            }

        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error al eliminar el creador.");
        }

    }

    // M E T O D O  E L I M I N A R  D I R E C C I O N  P E L I C U L A
    private void deleteDireccionPelicula() {
        try {
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml")
                    .addAnnotatedClass(Direccion_Pelicula.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Convertimos peliculas_id_pelicula a Integer.
            Integer peliculas_id_pelicula = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String pidStr = JOptionPane.showInputDialog("Introduce el ID de la película:");
                    peliculas_id_pelicula = Integer.parseInt(pidStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID válido.");
                }
            }

            // Convertimos directors_id_director a Integer.
            Integer directors_id_director = null;
            boolean validInput2 = false;
            while (!validInput2) {
                try {
                    String idDirectorStr = JOptionPane.showInputDialog("Introduce el ID del director:");
                    directors_id_director = Integer.parseInt(idDirectorStr);
                    validInput2 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID válido.");
                }
            }
            
            // Comprobamos el ID de la pelicula y el del director para encontrar la direccion de pelicula exacta y eliminarla.
            Direccion_Pelicula direccionPelicula = session.createQuery(
                    "FROM Direccion_Pelicula WHERE peliculas_id_pelicula = :peliculaId AND directors_id_director = :directorId",
                    Direccion_Pelicula.class)
                    .setParameter("peliculaId", peliculas_id_pelicula)
                    .setParameter("directorId", directors_id_director)
                    .uniqueResult();

            if (direccionPelicula == null) {
                JOptionPane.showMessageDialog(null, "No se encontró ningun registro.");
                session.close();
                return;
            }

            session.beginTransaction();
            session.delete(direccionPelicula);
            session.getTransaction().commit();

            JOptionPane.showMessageDialog(null, "Relación eliminada exitosamente de la tabla Direccion_Pelicula");
            session.close();

        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error en la operación de base de datos: " + he.getMessage());
        }

    }

    // M E T O D O  E L I M I N A R  P A R T I C I P A C I O N  P E L I C U L A
    private void deletePActorPelicula() {
        try {
            // Creamos un SessionFactory en la clase Participacion_Actor_Pelicula.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml")
                    .addAnnotatedClass(Participacion_Actor_Pelicula.class)
                    .buildSessionFactory();
            Session session = instancia.openSession();

            // Convertimos peliculas_id a Integer.
            Integer peliculas_id = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String pidStr = JOptionPane.showInputDialog("Introduce el ID de la película:");
                    peliculas_id = Integer.parseInt(pidStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID válido.");
                }
            }

            // Convertimos actors_id a Integer.
            Integer actors_id = null;
            boolean validInput2 = false;
            while (!validInput2) {
                try {
                    String aidStr = JOptionPane.showInputDialog("Introduce el ID del actor:");
                    actors_id = Integer.parseInt(aidStr);
                    validInput2 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID válido.");
                }
            }

            String papel_realiza = JOptionPane.showInputDialog("Introduce el papel que realiza:");

            String deletepap = "FROM Participacion_Actor_Pelicula WHERE peliculas_id = :pelicula_id AND actors_id = :actor_id AND papel_realiza = :papel";
            Query<Participacion_Actor_Pelicula> query = session.createQuery(deletepap, Participacion_Actor_Pelicula.class);
            query.setParameter("pelicula_id", peliculas_id);
            query.setParameter("actor_id", actors_id);
            query.setParameter("papel", papel_realiza);

            Participacion_Actor_Pelicula pap = query.uniqueResult();

            if (pap == null) {
                JOptionPane.showMessageDialog(null, "No se encontró la participación del actor en la película con los datos proporcionados.");
            } else {
                session.beginTransaction();
                session.delete(pap);
                session.getTransaction().commit();

                JOptionPane.showMessageDialog(null, "Registro en la tabla eliminado exitosamente.");
            }

            session.close();
        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error en la operación de base de datos: " + he.getMessage());
        }

    }

    // M E T O D O  E L I M I N A R  P A R T I C I P A C I O N  A C T O R  S E R I E
    private void deletePActorSerie() {
        try {
            // Creamos un SessionFactory en la clase Participacion_Actor_Serie.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml")
                    .addAnnotatedClass(Participacion_Actor_Serie.class)
                    .buildSessionFactory();
            Session session = instancia.openSession();

            // Convertimos series_id a Integer.
            Integer series_id = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String sidStr = JOptionPane.showInputDialog("Introduce el ID de la serie:");
                    series_id = Integer.parseInt(sidStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID válido.");
                }
            }

            // Convertimos actors_id a Integer.
            Integer actors_id = null;
            boolean validInput2 = false;
            while (!validInput2) {
                try {
                    String aidStr = JOptionPane.showInputDialog("Introduce el ID del actor:");
                    actors_id = Integer.parseInt(aidStr);
                    validInput2 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID válido.");
                }
            }
            
            // Introducimos mediante un JOptionPane el papel que realiza el actor en cuestion.
            String papel_realiza = JOptionPane.showInputDialog("Introduce el papel que realiza:");

            // Buscamos comprobando los atributos el actor en cuestion para así eliminarlo.
            String deletePAS = "FROM Participacion_Actor_Serie WHERE series_id = :serie_id AND actors_id = :actor_id AND papel_realiza = :papel";
            Query<Participacion_Actor_Serie> query = session.createQuery(deletePAS, Participacion_Actor_Serie.class);
            query.setParameter("serie_id", series_id);
            query.setParameter("actor_id", actors_id);
            query.setParameter("papel", papel_realiza);

            // Obtener la participación de la base de datos.
            Participacion_Actor_Serie pas = query.uniqueResult();

            // Si no se encuentra el objeto, mostramos un mensaje.
            if (pas == null) {
                JOptionPane.showMessageDialog(null, "No se encontró ningún registro.");
            } else {
                // Iniciamos la transacción y eliminamos el registro encontrado.
                session.beginTransaction();
                session.delete(pas);
                session.getTransaction().commit();

                JOptionPane.showMessageDialog(null, "Registro eliminado exitosamente.");
            }

            session.close();
        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error en la operación de base de datos: " + he.getMessage());
        }

    }

    // M E T O D O  E L I M I N A R  C R E A C I O N  S E R I E S
    private void deleteCreacionSeries() {
        try {
            // Creamos un SessionFactory en la clase Creacion_Series.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml")
                    .addAnnotatedClass(creacion_series.class)
                    .buildSessionFactory();
            Session session = instancia.openSession();

            // Convertimos series_id a Integer.
            Integer series_id = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String sidStr = JOptionPane.showInputDialog("Introduce el ID de la serie:");
                    series_id = Integer.parseInt(sidStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un número válido.");
                }
            }

            // Convertimos creador_id a Integer.
            Integer creador_id = null;
            boolean validInput2 = false;
            while (!validInput2) {
                try {
                    String cidStr = JOptionPane.showInputDialog("Introduce el ID del creador:");
                    creador_id = Integer.parseInt(cidStr);
                    validInput2 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un número válido.");
                }
            }

            // Se utiliza una sentencia para buscar la relacion entre series_id y creador_id y así poder realizar el DELETE.
            String deleteCreacion_Series = "FROM creacion_series WHERE series_id = :serie_id AND creador.id = :creador_id";
            Query<creacion_series> query = session.createQuery(deleteCreacion_Series, creacion_series.class);
            query.setParameter("serie_id", series_id);
            query.setParameter("creador_id", creador_id);

            creacion_series cs = query.uniqueResult();

            // Mensaje de error si no es encontrada la relacion entre los dos atributos.
            if (cs == null) {
                JOptionPane.showMessageDialog(null, "No se encontró ningun registro.");
            } else {
                // Iniciamos la transacción y eliminamos el registro encontrado.
                session.beginTransaction();
                session.delete(cs);
                session.getTransaction().commit();

                JOptionPane.showMessageDialog(null, "Registro eliminado exitosamente.");
            }

            session.close();
        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error en la operación de base de datos: " + he.getMessage());
        }

    }
}

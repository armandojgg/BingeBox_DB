/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bingeboxdb;

import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

/**
 *
 * @author MEDAC
 */
public class InsertarObjetos extends javax.swing.JFrame {

    /**
     * Creates new form InsertarObjetos
     */
    private static SessionFactory sessionFactory;

    public InsertarObjetos() {
        this.setSize(800, 600);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        int x = (screenSize.width - this.getWidth()) / 2;
        int y = (screenSize.height - this.getHeight()) / 2;

        this.setLocation(x, y);
        setTitle("BingeBox DB - Save");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButtonActors = new javax.swing.JButton();
        jButtonPeliculas = new javax.swing.JButton();
        jButtonSeries = new javax.swing.JButton();
        jButtonDirectors = new javax.swing.JButton();
        jButtonTemporadas = new javax.swing.JButton();
        jButtonCapitulos = new javax.swing.JButton();
        jButtonCreadorSerie = new javax.swing.JButton();
        jButtonDireccionPelicula = new javax.swing.JButton();
        jButtonParticipacionActorPel = new javax.swing.JButton();
        jButtonParticipacionActorSerie = new javax.swing.JButton();
        jButtonCreacionSeries = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButtonUpdate = new javax.swing.JButton();
        jButtonDelete = new javax.swing.JButton();
        jButtonVolver = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(204, 255, 255));

        jButtonActors.setBackground(new java.awt.Color(102, 0, 0));
        jButtonActors.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonActors.setForeground(new java.awt.Color(255, 255, 255));
        jButtonActors.setText("Actors");
        jButtonActors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActorsActionPerformed(evt);
            }
        });

        jButtonPeliculas.setBackground(new java.awt.Color(102, 0, 0));
        jButtonPeliculas.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonPeliculas.setForeground(new java.awt.Color(255, 255, 255));
        jButtonPeliculas.setText("Peliculas");
        jButtonPeliculas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPeliculasActionPerformed(evt);
            }
        });

        jButtonSeries.setBackground(new java.awt.Color(102, 0, 0));
        jButtonSeries.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonSeries.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSeries.setText("Series");
        jButtonSeries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSeriesActionPerformed(evt);
            }
        });

        jButtonDirectors.setBackground(new java.awt.Color(102, 0, 0));
        jButtonDirectors.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonDirectors.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDirectors.setText("Directors");
        jButtonDirectors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDirectorsActionPerformed(evt);
            }
        });

        jButtonTemporadas.setBackground(new java.awt.Color(102, 0, 0));
        jButtonTemporadas.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonTemporadas.setForeground(new java.awt.Color(255, 255, 255));
        jButtonTemporadas.setText("Temporadas");
        jButtonTemporadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTemporadasActionPerformed(evt);
            }
        });

        jButtonCapitulos.setBackground(new java.awt.Color(102, 0, 0));
        jButtonCapitulos.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonCapitulos.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCapitulos.setText("Capitulos");
        jButtonCapitulos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCapitulosActionPerformed(evt);
            }
        });

        jButtonCreadorSerie.setBackground(new java.awt.Color(102, 0, 0));
        jButtonCreadorSerie.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonCreadorSerie.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCreadorSerie.setText("Creador");
        jButtonCreadorSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreadorSerieActionPerformed(evt);
            }
        });

        jButtonDireccionPelicula.setBackground(new java.awt.Color(102, 0, 0));
        jButtonDireccionPelicula.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonDireccionPelicula.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDireccionPelicula.setText("Direccion pelicula");
        jButtonDireccionPelicula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDireccionPeliculaActionPerformed(evt);
            }
        });

        jButtonParticipacionActorPel.setBackground(new java.awt.Color(102, 0, 0));
        jButtonParticipacionActorPel.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonParticipacionActorPel.setForeground(new java.awt.Color(255, 255, 255));
        jButtonParticipacionActorPel.setText("P. Actor Pel√≠cula");
        jButtonParticipacionActorPel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParticipacionActorPelActionPerformed(evt);
            }
        });

        jButtonParticipacionActorSerie.setBackground(new java.awt.Color(102, 0, 0));
        jButtonParticipacionActorSerie.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonParticipacionActorSerie.setForeground(new java.awt.Color(255, 255, 255));
        jButtonParticipacionActorSerie.setText("P. Actor Serie");
        jButtonParticipacionActorSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParticipacionActorSerieActionPerformed(evt);
            }
        });

        jButtonCreacionSeries.setBackground(new java.awt.Color(102, 0, 0));
        jButtonCreacionSeries.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonCreacionSeries.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCreacionSeries.setText("Creacion series");
        jButtonCreacionSeries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreacionSeriesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonActors, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94)
                        .addComponent(jButtonTemporadas, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonPeliculas, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(94, 94, 94)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonCapitulos, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonCreadorSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonDireccionPelicula))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonParticipacionActorSerie, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonParticipacionActorPel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButtonCreacionSeries, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonActors, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTemporadas, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonParticipacionActorPel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPeliculas, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCapitulos, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonParticipacionActorSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCreadorSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreacionSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDireccionPelicula, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(204, 0, 51));
        jPanel3.setForeground(new java.awt.Color(153, 0, 0));

        jButtonUpdate.setBackground(new java.awt.Color(102, 0, 0));
        jButtonUpdate.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonUpdate.setForeground(new java.awt.Color(255, 255, 255));
        jButtonUpdate.setText("UPDATE");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jButtonDelete.setBackground(new java.awt.Color(102, 0, 0));
        jButtonDelete.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jButtonDelete.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDelete.setText("DELETE");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonVolver.setBackground(new java.awt.Color(102, 0, 0));
        jButtonVolver.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jButtonVolver.setForeground(new java.awt.Color(255, 255, 255));
        jButtonVolver.setText("VOLVER");
        jButtonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                    .addComponent(jButtonDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonVolver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(43, 43, 43)
                .addComponent(jButtonVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 0, 51));

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("SAVE");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // B O T O N  V O L V E R
    private void jButtonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverActionPerformed
        InterfazHibernate interfaz = new InterfazHibernate();
        interfaz.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButtonVolverActionPerformed
    // B O T O N  I R  A  V E N T A N A  U P D A T E
    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUpdateActionPerformed
        UpdateObjetos interfaz = new UpdateObjetos();
        interfaz.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButtonUpdateActionPerformed
    // B O T O N  I R  A  V E N T A N A  D E L E T E
    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        DeleteObjetos interfaz = new DeleteObjetos();
        interfaz.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButtonDeleteActionPerformed
    // B O T O N  I N S E R T A R  E N  A C T O R S
    private void jButtonActorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActorsActionPerformed
        a√±adiraActors();
    }//GEN-LAST:event_jButtonActorsActionPerformed
    // B O T O N  I N S E R T A R  E N  P E L I C U L A S
    private void jButtonPeliculasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPeliculasActionPerformed
        a√±adiraPeliculas();
    }//GEN-LAST:event_jButtonPeliculasActionPerformed
    // B O T O N  I N S E R T A R  E N  S E R I E S
    private void jButtonSeriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSeriesActionPerformed
        a√±adiraSeries();
    }//GEN-LAST:event_jButtonSeriesActionPerformed
    // B O T O N  I N S E R T A R  E N  D I R E C T O R S
    private void jButtonDirectorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDirectorsActionPerformed
        a√±adiraDirectors();
    }//GEN-LAST:event_jButtonDirectorsActionPerformed
    // B O T O N  I N S E R T A R  E N  T E M P O R A D A S
    private void jButtonTemporadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTemporadasActionPerformed
        a√±adiraTemporadas();
    }//GEN-LAST:event_jButtonTemporadasActionPerformed
    // B O T O N  I N S E R T A R  E N  C A P I T U L O S
    private void jButtonCapitulosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCapitulosActionPerformed
        a√±adiraCapitulos();
    }//GEN-LAST:event_jButtonCapitulosActionPerformed
    // B O T O N  I N S E R T A R  E N  C R E A D O R  S E R I E
    private void jButtonCreadorSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreadorSerieActionPerformed
        a√±adiraCreadorSerie();
    }//GEN-LAST:event_jButtonCreadorSerieActionPerformed
    // B O T O N  I N S E R T A R  E N  D I R E C C I O N  P E L I C U L A
    private void jButtonDireccionPeliculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDireccionPeliculaActionPerformed
        a√±adiraDireccionPelicula();
    }//GEN-LAST:event_jButtonDireccionPeliculaActionPerformed
    // B O T O N  I N S E R T A R  E N  P A R T I C I P A C I O N  A C T O R  P E L I C U L A
    private void jButtonParticipacionActorPelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonParticipacionActorPelActionPerformed
        a√±adiraPActorPelicula();
    }//GEN-LAST:event_jButtonParticipacionActorPelActionPerformed
    // B O T O N  I N S E R T A R  E N  P A R T I C I P A C I O N  A C T O R  S E R I E
    private void jButtonParticipacionActorSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonParticipacionActorSerieActionPerformed
        a√±adiraPActorSerie();
    }//GEN-LAST:event_jButtonParticipacionActorSerieActionPerformed
    // B O T O N  I N S E R T A R  E N  C R E A C I O N  S E R I E S
    private void jButtonCreacionSeriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreacionSeriesActionPerformed
        a√±adiraCreacionSeries();
    }//GEN-LAST:event_jButtonCreacionSeriesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InsertarObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InsertarObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InsertarObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InsertarObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsertarObjetos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActors;
    private javax.swing.JButton jButtonCapitulos;
    private javax.swing.JButton jButtonCreacionSeries;
    private javax.swing.JButton jButtonCreadorSerie;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonDireccionPelicula;
    private javax.swing.JButton jButtonDirectors;
    private javax.swing.JButton jButtonParticipacionActorPel;
    private javax.swing.JButton jButtonParticipacionActorSerie;
    private javax.swing.JButton jButtonPeliculas;
    private javax.swing.JButton jButtonSeries;
    private javax.swing.JButton jButtonTemporadas;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JButton jButtonVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables

    // M E T O D O S  I N S E R T S
    // Metodo denominado a√±adirPeliculas, el cual a√±ade una nueva pelicula a la tabla Peliculas, nos va pidiendo mediante JOptionPane.showInputDialog los
    // atributos de la tabla, ademas, hacemos parseInt al atributo Presupuesto para poder ingresar un numero para el presupuesto.
    private void a√±adiraPeliculas() {
        try {
            // Creamos un SessionFactory en la clase de Peliculas.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Peliculas_NaM.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Usamos JOptionPane para leer los valores introducidos.
            String titulo = JOptionPane.showInputDialog("Introduce el titulo:");
            String duracion = JOptionPane.showInputDialog("Introduce la duraci√≥n:");
            String genero = JOptionPane.showInputDialog("Introduce el g√©nero:");
            String rating = JOptionPane.showInputDialog("Introduce el rating:");
            String pais_pelicula = JOptionPane.showInputDialog("Introduce el pa√≠s de la pel√≠cula:");

            // Convertimos presupuesto a Integer.
            Integer presupuesto = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String presupuestoStr = JOptionPane.showInputDialog("Introduce el presupuesto:");
                    presupuesto = Integer.parseInt(presupuestoStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido para el presupuesto.");
                }
            }

            // Creamos el objeto en cuesti√≥n.
            Peliculas_NaM p = new Peliculas_NaM(titulo, genero, duracion, rating, pais_pelicula, presupuesto);

            // Empezamos la transacci√≥n y guardamos el objeto en la base de datos.
            session.beginTransaction();
            session.save(p);
            session.getTransaction().commit();
            JOptionPane.showMessageDialog(null, "Registro insertado en la tabla Peliculas");
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    // Metodo denominado a√±adiraActors, el cual a√±ade un nuevo actor a la tabla Actors, nos va pidiendo mediante JOptionPane.showInputDialog los
    // atributos de la tabla.
    private void a√±adiraActors() {
        try {
            // Creamos un SessionFactory en la clase de Actors.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Actors_NaM.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Usamos JOptionPane para leer los valores introducidos.
            String nombre_actor = JOptionPane.showInputDialog("Introduce el nombre del actor:");
            String nacionalidad_actor = JOptionPane.showInputDialog("Introduce la nacionalidad del actor:");
            String genero_actor = JOptionPane.showInputDialog("Introduce el g√©nero del actor/actriz:");

            // Creamos el objeto en cuesti√≥n.
            Actors_NaM a = new Actors_NaM(nombre_actor, nacionalidad_actor, genero_actor);

            // Empezamos la transacci√≥n y guardamos el objeto en la base de datos.
            session.beginTransaction();
            session.save(a);
            session.getTransaction().commit();
            JOptionPane.showMessageDialog(null, "Registro insertado en la tabla Actors");
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    // Metodo denominado a√±adiraSeries, el cual a√±ade una nueva Serie a la tabla Series, nos va pidiendo mediante JOptionPane.showInputDialog los
    // atributos de la tabla, ademas, hacemos parseInt a los atributos num_temporadas y num_capitulos para poder ingresar un numero al numero de temporadas y capitulos.
    private void a√±adiraSeries() {
        try {
            // Creamos un SessionFactory en la clase de Series.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Series_1aN.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Usamos JOptionPane para leer los valores introducidos.
            String titulo = JOptionPane.showInputDialog("Introduce el t√≠tulo de la serie:");
            String genero = JOptionPane.showInputDialog("Introduce el g√©nero de la serie");
            String comienzo_serie = JOptionPane.showInputDialog("Introduce cuando comenz√≥ la serie");
            String final_serie = JOptionPane.showInputDialog("Introduce cuando finaliz√≥ la serie");
            String pais_serie = JOptionPane.showInputDialog("Introduce el pa√≠s de la serie:");

            // Convertimos num_temporadas a Integer.
            Integer num_temporadas = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String num_temporadasStr = JOptionPane.showInputDialog("Introduce el n√∫mero de temporadas:");
                    num_temporadas = Integer.parseInt(num_temporadasStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido para el n√∫mero de temporadas.");
                }
            }
            // Convertimos num_capitulos a Integer.
            Integer num_capitulos = null;
            boolean validInput2 = false;
            while (!validInput2) {
                try {
                    String num_capitulosStr = JOptionPane.showInputDialog("Introduce el n√∫mero de cap√≠tulos:");
                    num_capitulos = Integer.parseInt(num_capitulosStr);
                    validInput2 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido para el n√∫mero de cap√≠tulos.");
                }
            }

            // Creamos el objeto en cuesti√≥n.
            Series_1aN s = new Series_1aN(titulo, genero, comienzo_serie, final_serie, pais_serie, num_temporadas, num_capitulos);

            // Empezamos la transacci√≥n y guardamos el objeto en la base de datos.
            session.beginTransaction();
            session.save(s);
            session.getTransaction().commit();
            JOptionPane.showMessageDialog(null, "Registro insertado en la tabla Series");
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    // Metodo denominado a√±adiraDirectors, el cual a√±ade un nuevo director a la tabla Directors, nos va pidiendo mediante JOptionPane.showInputDialog los
    // atributos de la tabla.
    private void a√±adiraDirectors() {
        try {
            // Creamos un SessionFactory en la clase de Directors.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Directors_NaM.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Usamos JOptionPane para leer los valores introducidos.
            String nombre_director = JOptionPane.showInputDialog("Introduce el nombre del director:");
            String nacionalidad_director = JOptionPane.showInputDialog("Introduce la nacionalidad del director:");
            String genero_director = JOptionPane.showInputDialog("Introduce el g√©nero del director:");

            // Creamos el objeto en cuesti√≥n.
            Directors_NaM d = new Directors_NaM(nombre_director, nacionalidad_director, genero_director);

            // Empezamos la transacci√≥n y guardamos el objeto en la base de datos.
            session.beginTransaction();
            session.save(d);
            session.getTransaction().commit();
            JOptionPane.showMessageDialog(null, "Registro insertado en la tabla Directors");
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    // Metodo denominado a√±adiraTemporadas, el cual a√±ade una nueva Temporada a la tabla Temporadas, 
    // hacemos parseInt a los atributos num_temporadam, a√±o_estreno, num_episodio y series_id.
    private void a√±adiraTemporadas() {
        try {
            // Creamos un SessionFactory en la clase de Temporadas.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Temporadas_1aN.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Convertimos num_temporadas a Integer.
            Integer num_temporada = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String num_temporadaStr = JOptionPane.showInputDialog("Introduce el n√∫mero de la temporada:");
                    num_temporada = Integer.parseInt(num_temporadaStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido para el n√∫mero de la temporada.");
                }
            }
            // Convertimos a√±o_estreno a Integer.
            Integer a√±o_estreno = null;
            boolean validInput2 = false;
            while (!validInput2) {
                try {
                    String a√±o_estrenoStr = JOptionPane.showInputDialog("Introduce el a√±o de estreno de la temporada:");
                    a√±o_estreno = Integer.parseInt(a√±o_estrenoStr);
                    validInput2 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido para la fecha de estreno.");
                }
            }
            // Convertimos num_episodios a Integer.
            Integer num_episodios = null;
            boolean validInput3 = false;
            while (!validInput3) {
                try {
                    String num_episodiosStr = JOptionPane.showInputDialog("Introduce la cantidad de episodios:");
                    num_episodios = Integer.parseInt(num_episodiosStr);
                    validInput3 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido para el n√∫mero de episodios.");
                }
            }
            // Convertimos series_id a Integer.
            Integer series_id = null;
            boolean validInput4 = false;
            while (!validInput4) {
                try {
                    String series_idStr = JOptionPane.showInputDialog("Introduce el ID de la serie:");
                    series_id = Integer.parseInt(series_idStr);
                    validInput4 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID v√°lido.");
                }
            }

            // Creamos el objeto en cuesti√≥n.
            Temporadas_1aN t = new Temporadas_1aN(num_temporada, a√±o_estreno, num_episodios, series_id);

            // Empezamos la transacci√≥n y guardamos el objeto en la base de datos.
            session.beginTransaction();
            session.save(t);
            session.getTransaction().commit();
            JOptionPane.showMessageDialog(null, "Registro insertado en la tabla Temporadas");
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    // Metodo denominado a√±adiraCapitulos, el cual nos va pidiendo mediante JOptionPane.showInputDialog los
    // atributos de la tabla, ademas hacemos parseInt a los siguientes atributos: numero_episodio y temporada_id.
    private void a√±adiraCapitulos() {
        try {
            // Creamos un SessionFactory en la clase de Capitulos.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Capitulos.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Usamos JOptionPane para leer los valores introducidos.
            String titulo_capitulo = JOptionPane.showInputDialog("Introduce el t√≠tulo del cap√≠tulo:");

            // Convertimos numero_episodio a Integer.
            Integer numero_episodio = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String num_episodioStr = JOptionPane.showInputDialog("Introduce el n√∫mero del episodio:");
                    numero_episodio = Integer.parseInt(num_episodioStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido para el episodio.");
                }
            }
            // Usamos JOptionPane para leer los valores introducidos.

            String duracion_episodio = JOptionPane.showInputDialog("Introduce la duraci√≥n del episodio:");
            String director_episodio = JOptionPane.showInputDialog("Introduce el director del episodio:");
            String guionista_episodio = JOptionPane.showInputDialog("Introduce el guionista del episodio");

            // Convertimos temporada_id a Integer.
            Integer temporada_id = null;
            boolean validInput2 = false;
            while (!validInput2) {
                try {
                    String temporada_idStr = JOptionPane.showInputDialog("Introduce el ID de la temporada:");
                    temporada_id = Integer.parseInt(temporada_idStr);
                    validInput2 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID v√°lido de la temporada.");
                }
            }

            // Creamos el objeto en cuesti√≥n.
            Capitulos c = new Capitulos(titulo_capitulo, numero_episodio, duracion_episodio, director_episodio, guionista_episodio, temporada_id);

            // Empezamos la transacci√≥n y guardamos el objeto en la base de datos.
            session.beginTransaction();
            session.save(c);
            session.getTransaction().commit();
            JOptionPane.showMessageDialog(null, "Registro insertado en la tabla Capitulos");
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    // Metodo denominado a√±adiraCreadorSerie, el cual nos va pidiendo mediante JOptionPane.showInputDialog los atributos de la tabla.
    private void a√±adiraCreadorSerie() {
        try {
            // Creamos un SessionFactory en la clase de Creador_Serie.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Creador_Serie_NaM.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Usamos JOptionPane para leer los valores introducidos.
            String nombre_creador = JOptionPane.showInputDialog("Introduce el nombre del creador:");
            String nacionalidad_creador = JOptionPane.showInputDialog("Introduce la nacionalidad del creador:");
            String genero_creador = JOptionPane.showInputDialog("Introduce el g√©nero del creador:");

            // Creamos el objeto en cuesti√≥n.
            Creador_Serie_NaM c = new Creador_Serie_NaM(nombre_creador, nacionalidad_creador, genero_creador);

            // Empezamos la transacci√≥n y guardamos el objeto en la base de datos.
            session.beginTransaction();
            session.save(c);
            session.getTransaction().commit();
            JOptionPane.showMessageDialog(null, "Registro insertado en la tabla Creador_Serie");
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }
    // Metodo denominado a√±adiraDireccionPelicula, el cual nos va pidiendo mediante JOptionPane.showInputDialog los atributos de la tabla, adem√°s de si el dato debe
    // de ser integer, se hace un parseInt.
    private void a√±adiraDireccionPelicula() {
        try {
            // Creamos un SessionFactory en la clase Direccion Pelicula.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Direccion_Pelicula.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Convertimos peliculas_id_pelicula a Integer.
            Integer peliculas_id_pelicula = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String pidStr = JOptionPane.showInputDialog("Introduce el ID de la pel√≠cula:");
                    peliculas_id_pelicula = Integer.parseInt(pidStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido.");
                }
            }

            // Convertimos directors_id_director a Integer.
            Integer directors_id_director = null;
            boolean validInput2 = false;
            while (!validInput2) {
                try {
                    String idDirectorStr = JOptionPane.showInputDialog("Introduce el ID del director:");
                    directors_id_director = Integer.parseInt(idDirectorStr);
                    validInput2 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido.");
                }
            }

            Peliculas_NaM pelicula = session.get(Peliculas_NaM.class, peliculas_id_pelicula);
            Directors_NaM director = session.get(Directors_NaM.class, directors_id_director);

            if (pelicula == null || director == null) {
                JOptionPane.showMessageDialog(null, "No se encontr√≥ la pel√≠cula o el director con los ID proporcionados.");
                session.close();
                return;
            }

            // Creamos el objeto.
            Direccion_Pelicula d = new Direccion_Pelicula(pelicula, director);

            // Guardamos el objeto en la BBDD.
            session.beginTransaction();
            session.save(d);
            session.getTransaction().commit();

            JOptionPane.showMessageDialog(null, "Registro insertado en la tabla Direccion Pelicula");
            session.close();
        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error en la operaci√≥n de base de datos: " + he.getMessage());
        }

    }
    // Metodo denominado a√±adiraPActorPelicula, el cual nos va pidiendo mediante JOptionPane.showInputDialog los atributos de la tabla, adem√°s de si el dato debe
    // de ser integer, se hace un parseInt.
    private void a√±adiraPActorPelicula() {
        try {
            // Creamos un SessionFactory en la clase Participacion_Actor_Pelicula.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Participacion_Actor_Pelicula.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Convertimos peliculas_id a Integer.
            Integer peliculas_id = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String pidStr = JOptionPane.showInputDialog("Introduce el ID de la pel√≠cula:");
                    peliculas_id = Integer.parseInt(pidStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido.");
                }
            }

            // Convertimos actors_id a Integer.
            Integer actors_id = null;
            boolean validInput2 = false;
            while (!validInput2) {
                try {
                    String aidStr = JOptionPane.showInputDialog("Introduce el ID del actor:");
                    actors_id = Integer.parseInt(aidStr);
                    validInput2 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido.");
                }
            }
            
            // Usamos JOptionPane para leer los valores introducidos.
            String papel_realiza = JOptionPane.showInputDialog("Introduce el papel que realiza:");

            Peliculas_NaM pelicula = session.get(Peliculas_NaM.class, peliculas_id);
            Actors_NaM actor = session.get(Actors_NaM.class, actors_id);

            // No deben de ser nulas.
            if (pelicula == null || actor == null) {
                JOptionPane.showMessageDialog(null, "No se encontr√≥ la pel√≠cula o el actor con los ID proporcionados.");
                session.close();
                return;
            }

            // Creamos el objeto.
            Participacion_Actor_Pelicula pap = new Participacion_Actor_Pelicula(pelicula, actor, papel_realiza);

            // Guardamos el objeto en la BBDD.
            session.beginTransaction();
            session.save(pap);
            session.getTransaction().commit();

            JOptionPane.showMessageDialog(null, "Registro insertado en la tabla Participacion_Actor_Pelicula");
            session.close();
        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error en la operaci√≥n de base de datos: " + he.getMessage());
        }
    }
    // Metodo denominado a√±adiraPActorSerie, el cual nos va pidiendo mediante JOptionPane.showInputDialog los atributos de la tabla, adem√°s de si el dato debe
    // de ser integer, se hace un parseInt.
    private void a√±adiraPActorSerie() {
        try {
            // Creamos un SessionFactory en la clase Participacion_Actor_Serie.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Participacion_Actor_Serie.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Convertimos peliculas_id a Integer.
            Integer series_id = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String sidStr = JOptionPane.showInputDialog("Introduce el ID de la serie:");
                    series_id = Integer.parseInt(sidStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido.");
                }
            }

            // Convertimos actors_id a Integer.
            Integer actors_id = null;
            boolean validInput2 = false;
            while (!validInput2) {
                try {
                    String aidStr = JOptionPane.showInputDialog("Introduce el ID del actor:");
                    actors_id = Integer.parseInt(aidStr);
                    validInput2 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido.");
                }
            }
            
            // Usamos JOptionPane para leer los valores introducidos.
            String papel_realiza = JOptionPane.showInputDialog("Introduce el papel que realiza:");

            Series_1aN serie = session.get(Series_1aN.class, series_id);
            Actors_NaM actor = session.get(Actors_NaM.class, actors_id);

            // No deben de ser nulas.
            if (serie == null || actor == null) {
                JOptionPane.showMessageDialog(null, "No se encontr√≥ la serie o el actor con los ID proporcionados.");
                session.close();
                return;
            }

            // Creamos el objeto.
            Participacion_Actor_Serie pas = new Participacion_Actor_Serie(serie, actor, papel_realiza);

            // Guardamos el objeto en la BBDD.
            session.beginTransaction();
            session.save(pas);
            session.getTransaction().commit();

            JOptionPane.showMessageDialog(null, "Registro insertado en la tabla Participacion_Actor_Serie");
            session.close();
        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error en la operaci√≥n de base de datos: " + he.getMessage());
        }
    }
    // Metodo denominado a√±adiraCreacionSeries, el cual nos va pidiendo mediante JOptionPane.showInputDialog los atributos de la tabla, adem√°s de si el dato debe
    // de ser integer, se hace un parseInt.
    private void a√±adiraCreacionSeries() {
        try {
            // Creamos un SessionFactory en la clase Participacion_Actor_Serie.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(creacion_series.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Convertimos series_id a Integer.
            Integer series_id = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String sidStr = JOptionPane.showInputDialog("Introduce el ID de la serie:");
                    series_id = Integer.parseInt(sidStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido.");
                }
            }

            // Convertimos creador_id a Integer.
            Integer creador_id = null;
            boolean validInput2 = false;
            while (!validInput2) {
                try {
                    String cidStr = JOptionPane.showInputDialog("Introduce el ID del creador:");
                    creador_id = Integer.parseInt(cidStr);
                    validInput2 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido.");
                }
            }

            Series_1aN serie = session.get(Series_1aN.class, series_id);
            Creador_Serie_NaM creador = session.get(Creador_Serie_NaM.class, creador_id);

            // No deben de ser nulas.
            if (serie == null || creador == null) {
                JOptionPane.showMessageDialog(null, "No se encontr√≥ la serie o el creador con los ID proporcionados.");
                session.close();
                return;
            }

            // Creamos el objeto.
            creacion_series cs = new creacion_series(serie, creador);

            // Guardamos el objeto en la BBDD.
            session.beginTransaction();
            session.save(cs);
            session.getTransaction().commit();

            JOptionPane.showMessageDialog(null, "Registro insertado en la tabla Creacion_Series");
            session.close();
        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error en la operaci√≥n de base de datos: " + he.getMessage());
        }
    }
}

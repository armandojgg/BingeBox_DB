/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bingeboxdb;

import java.awt.Image;
import java.sql.*;
import java.util.List;
import javax.swing.*;

/**
 *
 * @author Armando
 */
public class InterfazPrincipal extends javax.swing.JFrame {

    private Connection dbConnection = null;

    public InterfazPrincipal() {
        setTitle("BingeBox Database");
        setSize(300, 200);
        setDefaultCloseOperation(InterfazPrincipal.EXIT_ON_CLOSE);
        setLayout(null);
        initComponents();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        botonConexion = new javax.swing.JButton();
        cerrarConexion = new javax.swing.JButton();
        sentenciasQueridas = new javax.swing.JLabel();
        botonInsert = new javax.swing.JButton();
        botonUpdate = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setBackground(new java.awt.Color(255, 102, 102));
        jLabel1.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 0));
        jLabel1.setText("BingeBox DataBase");

        botonConexion.setText("CONECTAR");
        botonConexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonConexionActionPerformed(evt);
            }
        });

        cerrarConexion.setText("DESCONECTAR");
        cerrarConexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarConexionActionPerformed(evt);
            }
        });

        sentenciasQueridas.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        sentenciasQueridas.setText("¿Qué sentencia deseas realizar?");

        botonInsert.setText("INSERT");
        botonInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonInsertActionPerformed(evt);
            }
        });

        botonUpdate.setText("UPDATE");
        botonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(botonInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sentenciasQueridas)
                            .addComponent(botonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(97, 97, 97)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cerrarConexion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonConexion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botonConexion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cerrarConexion, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sentenciasQueridas))
                .addGap(18, 18, 18)
                .addComponent(botonInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(botonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(217, 217, 217))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // B O T Ó N  C O N E C T A R
    private void botonConexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonConexionActionPerformed
        conectar();
    }//GEN-LAST:event_botonConexionActionPerformed
    // B O T Ó N  D E S C O N E C T A R
    private void cerrarConexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarConexionActionPerformed
        cerrarConexion();
    }//GEN-LAST:event_cerrarConexionActionPerformed
    // B O T Ó N  I N S E R T
    private void botonInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInsertActionPerformed
        insertarDatos();
    }//GEN-LAST:event_botonInsertActionPerformed
    // B O T Ó N  U P D A T E
    private void botonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonUpdateActionPerformed
        actualizarDatos();
    }//GEN-LAST:event_botonUpdateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonConexion;
    private javax.swing.JButton botonInsert;
    private javax.swing.JButton botonUpdate;
    private javax.swing.JButton cerrarConexion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel sentenciasQueridas;
    // End of variables declaration//GEN-END:variables

    // M É T O D O  C O N E C T A R
    private void conectar() {
        final String DRIVER = "com.mysql.cj.jdbc.Driver";
        final String URL_CONEXION = "jdbc:mysql://localhost:3306/bdpeliculasseries";
        final String usuario = "root";
        final String password = "1234";

        try {
            // Cargar el driver JDBC
            Class.forName(DRIVER);

            // Establecer la conexión
            dbConnection = DriverManager.getConnection(URL_CONEXION, usuario, password);

            JOptionPane.showMessageDialog(this, "Conexión realizada correctamente", "Estado de la Conexión", JOptionPane.INFORMATION_MESSAGE);

            // Crear un objeto Statement
            dbConnection.createStatement();

            // Aquí puedes realizar operaciones en la base de datos
        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Driver no encontrado: " + e.getMessage());
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error en la conexión", "Estado de la Conexión", JOptionPane.ERROR_MESSAGE);
        }
    }

    // M É T O D O  D E S C O N E C T A R
    private void cerrarConexion() {
        try {
            if (dbConnection != null) {
                dbConnection.close();
                System.out.println("Conexión cerrada.");
                JOptionPane.showMessageDialog(this, "Conexión cerrada correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No hay conexión activa.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException e) {
            System.err.println("Error al cerrar la conexión: " + e.getMessage());
        }
    }

    // M É T O D O  I N S E R T A R  D A T O S
    private void insertarDatos() {
        // Lista de nombres de tablas
        List<String> nombresTablas = List.of("actors", "capitulos", "creacion_series", "creador_serie", "direccion_pelicula", "directors", "log_series",
                "participacion_actor_pelicula", "participacion_actor_serie", "peliculas", "series", "temporadas");
        // Solicitar el nombre de la tabla con un cuadro de diálogo
        String nombreTabla = (String) JOptionPane.showInputDialog(
                null,
                "Selecciona el nombre de la tabla:",
                "Seleccion tabla",
                JOptionPane.QUESTION_MESSAGE,
                null,
                nombresTablas.toArray(),
                nombresTablas.get(0)
        );
        if (nombreTabla == null) {
            JOptionPane.showMessageDialog(null, "No seleccionaste ningún nombre de tabla.");
            return;
        }

        // Solicitar las columnas
        String columnas = JOptionPane.showInputDialog("Ingrese las columnas separadas por coma (ej. columna1,columna2,...):");
        String[] columnasArray = columnas.split(",");

        // Construir la consulta SQL
        String sql = "INSERT INTO " + nombreTabla + " (" + String.join(", ", columnasArray) + ") VALUES (" + "?,".repeat(columnasArray.length).replaceAll(",$", "") + ")";

        // Insertar datos en la base de datos
        try ( PreparedStatement pstmt = dbConnection.prepareStatement(sql)) {
            for (int i = 0; i < columnasArray.length; i++) {
                String dato = JOptionPane.showInputDialog("Ingrese el dato para " + columnasArray[i].trim() + ":");
                pstmt.setString(i + 1, dato);
            }
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(null, "Datos insertados exitosamente en la tabla " + nombreTabla);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al insertar datos: " + e.getMessage());
        }
    }

    // M É T O D O  P A R A  A C T U A L I Z A R  D A T O S
    private void actualizarDatos() {
        // Lista de nombres de tablas
        List<String> nombresTablas = List.of("actors", "capitulos", "creacion_series", "creador_serie", "direccion_pelicula", "directors", "log_series",
                "participacion_actor_pelicula", "participacion_actor_serie", "peliculas", "series", "temporadas");

        // Solicitar el nombre de la tabla con un cuadro de diálogo
        String nombreTabla = (String) JOptionPane.showInputDialog(
                null,
                "Selecciona el nombre de la tabla:",
                "Seleccion tabla",
                JOptionPane.QUESTION_MESSAGE,
                null,
                nombresTablas.toArray(),
                nombresTablas.get(0)
        );

        if (nombreTabla == null) {
            JOptionPane.showMessageDialog(null, "No seleccionaste ningún nombre de tabla.");
            return;
        }

        // Solicitar las columnas y sus nuevos valores
        String columnas = JOptionPane.showInputDialog("Ingrese las columnas a actualizar separadas por coma (ej. rating=9.0,presupuesto=7500000):");
        if (columnas == null || columnas.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No ingresaste columnas.");
            return;
        }

        String[] columnasArray = columnas.split(",");

        // Solicitar la condición para el WHERE
        String condicion = JOptionPane.showInputDialog("Ingrese la condición para actualizar (ej. id=1):");
        if (condicion == null || condicion.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No ingresaste una condición.");
            return;
        }

        // Construir la consulta SQL con parámetros
        String sql = "UPDATE " + nombreTabla + " SET ";
        for (int i = 0; i < columnasArray.length; i++) {
            if (i > 0) {
                sql += ", ";
            }
            String[] partes = columnasArray[i].split("=");
            sql += partes[0].trim() + "=?";
        }
        sql += " WHERE " + condicion;

        // Actualizar datos en la base de datos
        try ( PreparedStatement pstmt = dbConnection.prepareStatement(sql)) {
            // Establecer los valores
            for (int i = 0; i < columnasArray.length; i++) {
                String[] partes = columnasArray[i].split("=");
                pstmt.setString(i + 1, partes[1].trim());
            }
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(null, "Datos actualizados exitosamente en la tabla " + nombreTabla);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al actualizar datos: " + e.getMessage());
        }
    }

}

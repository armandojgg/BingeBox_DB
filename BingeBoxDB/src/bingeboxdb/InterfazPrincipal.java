/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bingeboxdb;

import java.awt.Dimension;
import java.awt.Font;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;
import javax.swing.*;

/**
 *
 * @author Armando
 */
public class InterfazPrincipal extends javax.swing.JFrame {

    private Connection dbConnection = null;

    public InterfazPrincipal() {
        setDefaultCloseOperation(InterfazPrincipal.EXIT_ON_CLOSE);
        setSize(300, 200);
        setTitle("BingeBox Database");
        setLocationRelativeTo(null); // Centra la ventana en la pantalla
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        botonConexion = new javax.swing.JButton();
        cerrarConexion = new javax.swing.JButton();
        sentenciasQueridas = new javax.swing.JLabel();
        botonInsert = new javax.swing.JButton();
        botonUpdate = new javax.swing.JButton();
        botonDelete = new javax.swing.JButton();
        botonSelect = new javax.swing.JButton();
        botonJOIN = new javax.swing.JButton();
        botonLIKE = new javax.swing.JButton();
        botonGROUPBY = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 204, 153));

        jLabel1.setBackground(new java.awt.Color(255, 102, 102));
        jLabel1.setFont(new java.awt.Font("sansserif", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 0));
        jLabel1.setText("BingeBox DataBase");

        botonConexion.setText("CONECTAR");
        botonConexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonConexionActionPerformed(evt);
            }
        });

        cerrarConexion.setText("DESCONECTAR");
        cerrarConexion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cerrarConexionActionPerformed(evt);
            }
        });

        sentenciasQueridas.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        sentenciasQueridas.setText("¿Qué sentencia deseas realizar?");

        botonInsert.setText("INSERT");
        botonInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonInsertActionPerformed(evt);
            }
        });

        botonUpdate.setText("UPDATE");
        botonUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonUpdateActionPerformed(evt);
            }
        });

        botonDelete.setText("DELETE");
        botonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonDeleteActionPerformed(evt);
            }
        });

        botonSelect.setText("SELECT");
        botonSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonSelectActionPerformed(evt);
            }
        });

        botonJOIN.setText("JOIN");
        botonJOIN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonJOINActionPerformed(evt);
            }
        });

        botonLIKE.setText("LIKE");
        botonLIKE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonLIKEActionPerformed(evt);
            }
        });

        botonGROUPBY.setText("GROUP BY");
        botonGROUPBY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonGROUPBYActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(131, 131, 131)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botonInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(botonJOIN, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(sentenciasQueridas)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(botonLIKE, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(botonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(botonGROUPBY, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(botonSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(97, 97, 97)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cerrarConexion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(botonConexion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(botonConexion, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cerrarConexion, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sentenciasQueridas))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonInsert, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonJOIN, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonLIKE, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonGROUPBY, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(botonSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // B O T O N  C O N E C T A R
    private void botonConexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonConexionActionPerformed
        conectar();
    }//GEN-LAST:event_botonConexionActionPerformed
    // B O T O N  D E S C O N E C T A R
    private void cerrarConexionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cerrarConexionActionPerformed
        cerrarConexion();
    }//GEN-LAST:event_cerrarConexionActionPerformed
    // B O T O N  I N S E R T
    private void botonInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonInsertActionPerformed
        insertarDatos();
    }//GEN-LAST:event_botonInsertActionPerformed
    // B O T O N  U P D A T E
    private void botonUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonUpdateActionPerformed
        actualizarDatos();
    }//GEN-LAST:event_botonUpdateActionPerformed
    // B O T O N  D E L E T E
    private void botonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonDeleteActionPerformed
        borrarDatos();
    }//GEN-LAST:event_botonDeleteActionPerformed
    // B O T O N  S E L E C T
    private void botonSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonSelectActionPerformed
        realizarSelect();
    }//GEN-LAST:event_botonSelectActionPerformed
    // B O T O N  J O I N
    private void botonJOINActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonJOINActionPerformed
        realizarJoin();
    }//GEN-LAST:event_botonJOINActionPerformed
    // B O T O N  L I K E
    private void botonLIKEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonLIKEActionPerformed
        realizarLike();
    }//GEN-LAST:event_botonLIKEActionPerformed
    // B O T O N  G R O U P  B Y
    private void botonGROUPBYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonGROUPBYActionPerformed
        realizarGroupBy();
    }//GEN-LAST:event_botonGROUPBYActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InterfazPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InterfazPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonConexion;
    private javax.swing.JButton botonDelete;
    private javax.swing.JButton botonGROUPBY;
    private javax.swing.JButton botonInsert;
    private javax.swing.JButton botonJOIN;
    private javax.swing.JButton botonLIKE;
    private javax.swing.JButton botonSelect;
    private javax.swing.JButton botonUpdate;
    private javax.swing.JButton cerrarConexion;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel sentenciasQueridas;
    // End of variables declaration//GEN-END:variables

    // M E T O D O  C O N E C T A R
    private void conectar() {
        final String DRIVER = "com.mysql.cj.jdbc.Driver";
        final String URL_CONEXION = "jdbc:mysql://localhost:3306/bdpeliculasseries";
        final String usuario = "root";
        final String password = "1234";

        try {
            Class.forName(DRIVER);

            dbConnection = DriverManager.getConnection(URL_CONEXION, usuario, password);

            JOptionPane.showMessageDialog(this, "Conexión realizada correctamente", "Estado de la Conexión", JOptionPane.INFORMATION_MESSAGE);

            dbConnection.createStatement();

        } catch (ClassNotFoundException e) {
            JOptionPane.showMessageDialog(this, "Driver no encontrado: " + e.getMessage());
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error en la conexión", "Estado de la Conexión", JOptionPane.ERROR_MESSAGE);
        }
    }

    // M E T O D O  D E S C O N E C T A R
    private void cerrarConexion() {
        try {
            if (dbConnection != null) {
                dbConnection.close();
                System.out.println("Conexión cerrada.");
                JOptionPane.showMessageDialog(this, "Conexión cerrada correctamente.", "Información", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "No hay conexión activa.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException e) {
            System.err.println("Error al cerrar la conexión: " + e.getMessage());
        }
    }

    // M E T O D O  I N S E R T A R  D A T O S
    private void insertarDatos() {

        List<String> nombredelasTablas = List.of("actors", "capitulos", "creacion_series", "creador_serie", "direccion_pelicula", "directors", "log_series",
                "participacion_actor_pelicula", "participacion_actor_serie", "peliculas", "series", "temporadas");
        String nombreTabla = (String) JOptionPane.showInputDialog(
                null,
                "Selecciona el nombre de la tabla:",
                "Elección de la tabla",
                JOptionPane.QUESTION_MESSAGE,
                null,
                nombredelasTablas.toArray(),
                nombredelasTablas.get(0)
        );
        if (nombreTabla == null) {
            JOptionPane.showMessageDialog(null, "No seleccionaste ninguna tabla.");
            return;
        }
        // Hace que el usuario ingrese las columnas de la tabla en cuestión
        String columnas = JOptionPane.showInputDialog("Ingrese las columnas separadas por coma (Ejemplo: id_serie, nombre_serie...):");
        String[] columnasArray = columnas.split(",");

        // Definimos el String de nuestra sentencia
        String sql = "INSERT INTO " + nombreTabla + " (" + String.join(", ", columnasArray) + ") VALUES (" + "?,".repeat(columnasArray.length).replaceAll(",$", "") + ")";

        // Se insertan los datos en la base de datos
        try ( PreparedStatement pstmt = dbConnection.prepareStatement(sql)) {
            for (int i = 0; i < columnasArray.length; i++) {
                String dato = JOptionPane.showInputDialog("Ingrese el dato para " + columnasArray[i].trim() + ":");
                if (dato == null || dato.trim().isEmpty()) {
                    pstmt.setNull(i + 1, java.sql.Types.VARCHAR);
                } else {
                    pstmt.setString(i + 1, dato);
                }
            }
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(null, "Datos insertados exitosamente en la tabla " + nombreTabla);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al insertar datos: " + e.getMessage());
        }
    }

    // M E T O D O  P A R A  A C T U A L I Z A R  D A T O S
    private void actualizarDatos() {
        List<String> nombredelasTablas = List.of("actors", "capitulos", "creacion_series", "creador_serie", "direccion_pelicula", "directors", "log_series",
                "participacion_actor_pelicula", "participacion_actor_serie", "peliculas", "series", "temporadas");

        String nombreTabla = (String) JOptionPane.showInputDialog(
                null,
                "Selecciona el nombre de la tabla:",
                "Elección de la tabla:",
                JOptionPane.QUESTION_MESSAGE,
                null,
                nombredelasTablas.toArray(),
                nombredelasTablas.get(0)
        );

        if (nombreTabla == null) {
            JOptionPane.showMessageDialog(null, "No seleccionaste ningún nombre de tabla.");
            return;
        }

        // Hacemos que el usuario deba ingresar el nombre de las columnas que quiera actualizar
        String columnas = JOptionPane.showInputDialog("Escribe el valor nuevo para cualquier columna: (Por ejemplo: id_serie= 12, nombre_serie= Stranger Things");
        if (columnas == null || columnas.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No ingresaste columnas.");
            return;
        }

        String[] columnasArray = columnas.split(",");

        // Hacemos que el usuario ingrese la condicion para el WHERE
        String condicion = JOptionPane.showInputDialog("Ingrese la condición con la que se actualizará. (Ejemplo: nombre_actor= James)");
        if (condicion == null || condicion.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No ingresaste una condición.");
            return;
        }

        // Mediante parametros hacemos la consulta UPDATE
        String sql = "UPDATE " + nombreTabla + " SET ";
        for (int i = 0; i < columnasArray.length; i++) {
            if (i > 0) {
                sql += ", ";
            }
            String[] partes = columnasArray[i].split("=");
            sql += partes[0].trim() + "=?";
        }
        sql += " WHERE " + condicion;

        try ( PreparedStatement pstmt = dbConnection.prepareStatement(sql)) {
            for (int i = 0; i < columnasArray.length; i++) {
                String[] partes = columnasArray[i].split("=");
                pstmt.setString(i + 1, partes[1].trim());
            }
            pstmt.executeUpdate();
            JOptionPane.showMessageDialog(null, "Datos actualizados exitosamente en la tabla " + nombreTabla);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error al actualizar datos: " + e.getMessage());
        }
    }

    // M E T O D O  D E L E T E
    private void borrarDatos() {
        List<String> nombredelasTablas = List.of("actors", "capitulos", "creacion_series", "creador_serie", "direccion_pelicula",
                "directors", "log_series", "participacion_actor_pelicula",
                "participacion_actor_serie", "peliculas", "series", "temporadas");

        // Mediante un JOptionPane le solicitamos al usuario el nombre de la tabla
        String nombreTabla = (String) JOptionPane.showInputDialog(
                null,
                "Selecciona el nombre de la tabla:",
                "Seleccion tabla",
                JOptionPane.QUESTION_MESSAGE,
                null,
                nombredelasTablas.toArray(),
                nombredelasTablas.get(0)
        );

        if (nombreTabla == null) {
            JOptionPane.showMessageDialog(null, "No seleccionaste ningún nombre de tabla.");
            return;
        }

        // Hacemos que el usuario introduzca la condicion para eliminar el registro
        String condicion = JOptionPane.showInputDialog("Escribe la condición para eliminar (Ejemplo: id_actor=10):");

        if (condicion == null || condicion.trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No proporcionaste ninguna condición.");
            return;
        }

        // Generamos el DELETE
        String sql = "DELETE FROM " + nombreTabla + " WHERE " + condicion;

        if (dbConnection == null) {
            JOptionPane.showMessageDialog(null, "No hay conexión activa. Conéctate antes de ejecutar esta operación.");
            return;
        }

        try ( PreparedStatement statement = dbConnection.prepareStatement(sql)) {
            int filasAfectadas = statement.executeUpdate();
            JOptionPane.showMessageDialog(null, "Se han eliminado " + filasAfectadas + " filas de la tabla " + nombreTabla);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al ejecutar el DELETE: " + e.getMessage());
        }
    }

    // M E T O D O  S E L E C T
    private void realizarSelect() {
        List<String> nombredelasTablas = List.of("actors", "capitulos", "creacion_series", "creador_serie", "direccion_pelicula",
                "directors", "log_series", "participacion_actor_pelicula",
                "participacion_actor_serie", "peliculas", "series", "temporadas");

        // Mediante un JOptionPane solicita el nombre de la tabla en cuestion
        String nombreTabla = (String) JOptionPane.showInputDialog(
                null,
                "Selecciona el nombre de la tabla:",
                "Seleccion tabla",
                JOptionPane.QUESTION_MESSAGE,
                null,
                nombredelasTablas.toArray(),
                nombredelasTablas.get(0)
        );

        if (nombreTabla == null) {
            JOptionPane.showMessageDialog(null, "No seleccionaste ningún nombre de tabla.");
            return;
        }

        // Verifica si la conexion ha sido conectada
        if (dbConnection == null) {
            JOptionPane.showMessageDialog(null, "No hay conexión activa. Conéctate antes de ejecutar esta operación.");
            return;
        }

        // Construir la sentencia SQL SELECT
        String sql = "SELECT * FROM " + nombreTabla;

        try ( PreparedStatement statement = dbConnection.prepareStatement(sql);  ResultSet resultSet = statement.executeQuery()) {

            // Obtener los metadatos de la consulta para saber las columnas
            ResultSetMetaData metaData = resultSet.getMetaData();
            int columnCount = metaData.getColumnCount();

            // Definir un ancho fijo para cada columna (ajusta según el tamaño esperado de los datos)
            int columnWidth = 20;

            // Crear un StringBuilder para almacenar los datos y mostrarlos
            StringBuilder resultado = new StringBuilder("Datos de la tabla " + nombreTabla + ":\n\n");

            // Agregar los nombres de las columnas con un ancho fijo
            for (int i = 1; i <= columnCount; i++) {
                resultado.append(String.format("%-" + columnWidth + "s", metaData.getColumnName(i)));
            }
            resultado.append("\n");

            // Agregar separadores entre encabezado y datos
            resultado.append("-".repeat(columnWidth * columnCount)).append("\n");

            // Agregar cada fila de resultados con formato de columna fija
            while (resultSet.next()) {
                for (int i = 1; i <= columnCount; i++) {
                    String value = resultSet.getString(i);
                    resultado.append(String.format("%-" + columnWidth + "s", value));
                }
                resultado.append("\n");
            }

            // Hace que el resultado se muestre de forma ordenada y bonita mediante un JTextField
            JTextArea textArea = new JTextArea(resultado.toString());
            textArea.setFont(new Font("monospaced", Font.PLAIN, 12));
            JScrollPane scrollPane = new JScrollPane(textArea);
            scrollPane.setPreferredSize(new Dimension(800, 400));

            JOptionPane.showMessageDialog(null, scrollPane, "Resultado de la consulta", JOptionPane.INFORMATION_MESSAGE);

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al realizar el SELECT: " + e.getMessage());
        }
    }

    // M E T O D O  M E N U  J O I N S
    private void realizarJoin() {
        String[] opciones = {"Películas, Participación del Actor en la Película y Actores", "Series, creadores de series y nacionalidad del creador",
            "Series, temporadas y capitulos"};
        String seleccion = (String) JOptionPane.showInputDialog(null, "Elija el JOIN a realizar", "Seleccionar JOIN",
                JOptionPane.QUESTION_MESSAGE, null, opciones, opciones[0]);
        switch (seleccion) {
            case "Películas, Participación del Actor en la Película y Actores":
                realizarJoinPeliculasParticipacionActorPeliculaActores();
                break;
            case "Series, creadores de series y nacionalidad del creador":
                realizarJoinSeriesCreadoresdeSeriesNacionalidadCreador();
                break;
            case "Series, temporadas y capitulos":
                realizarJoinSeriesTemporadasCapitulos();
        }
    }

    // M E T O D O S  D E  J O I N S
    // Estamos seleccionando las siguientes columnas: El titulo de la película, el nombre del actor y el papel que realiza el actor.
    // Vamos a extraer los datos de la tabla principal que será "Peliculas"
    // Hacemos una union mediante el primer JOIN de las tabla peliculas con la de participacion_actor_pelicula
    // Con el ON, lo que hacemos es que el id_pelicula de la tabla peliculas deba ser igual al id de la tabla participacion_actor_pelicula
    // Con el segundo JOIN, lo que hacemos es lo siguiente: Unimos la tabla participación_actor_pelicula con la de actors
    // Con el ON, lo que hacemos es que el actors_id de participacion_actor_pelicula debe ser igual al id_actor de la tabla actors
    // Este JOIN te muestra una lista con el título de la película, el nombre de los actores involucrados y el papel que desempeñaron en esta.
    private void realizarJoinPeliculasParticipacionActorPeliculaActores() {
        String primerJoin = "SELECT peliculas.titulo, actors.nombre_actor, participacion_actor_pelicula.papel_realiza "
                + "FROM peliculas "
                + "JOIN participacion_actor_pelicula ON peliculas.id_pelicula = participacion_actor_pelicula.peliculas_id "
                + "JOIN actors ON participacion_actor_pelicula.actors_id = actors.id_actor";

        StringBuilder resultados = new StringBuilder();
        try ( PreparedStatement pstmt = dbConnection.prepareStatement(primerJoin);  ResultSet rs = pstmt.executeQuery()) {
            String header = String.format("%-40s %-30s %-30s%n", "Título de la Película", "Nombre del Actor", "Papel Realiza");
            resultados.append(header);
            resultados.append(String.format("%-40s %-30s %-30s%n", "---------------------", "---------------", "-------------"));

            while (rs.next()) {
                String tituloPelicula = rs.getString("titulo");
                String nombreActor = rs.getString("nombre_actor");
                String papelRealiza = rs.getString("papel_realiza");
                resultados.append(String.format("%-40s %-30s %-30s%n", tituloPelicula, nombreActor, papelRealiza));
            }
            JTextArea textArea = new JTextArea(resultados.toString());
            textArea.setEditable(false);
            textArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
            JScrollPane scrollPane = new JScrollPane(textArea);

            JOptionPane.showMessageDialog(null, scrollPane, "Resultados del JOIN", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /* Seleccionamos las siguientes columnas: El titulo de la serie, el nombre del creador y la nacionalidad de este.
        Extraemos los datos de una tabla principal la cual sera 'Series'
        Hacemos una union mediante un JOIN de la tabla series con la de creacion series
        Mediante el ON, hacemos es que el id_serie de la serie debe ser igual al series_id de la tabla creacion_series
        En el segundo JOIN, unimos la tabla creador_serie con la de creacion_series
        Con el ON, lo que hacemos es que el creador_id de la tabla creacion_series debe ser igual al idcreador_serie de la tabla creador_serie
        Este JOIN nos muestra una lista con el titulo de la serie, el nombre del creador de esta y su nacionalidad.*/
    private void realizarJoinSeriesCreadoresdeSeriesNacionalidadCreador() {
        String segundoJoin = "SELECT series.titulo, creador_serie.nombre, creador_serie.nacionalidad "
                + "FROM series "
                + "JOIN creacion_series ON series.id_serie = creacion_series.series_id "
                + "JOIN creador_serie ON creacion_series.creador_id = creador_serie.idcreador_serie";

        StringBuilder resultados = new StringBuilder();
        try ( PreparedStatement pstmt = dbConnection.prepareStatement(segundoJoin);  ResultSet rs = pstmt.executeQuery()) {

            String header = String.format("%-40s %-30s %-20s%n", "Título de la Serie", "Nombre del Creador", "Nacionalidad");
            resultados.append(header);
            resultados.append(String.format("%-40s %-30s %-20s%n", "------------------", "-----------------", "-------------"));

            while (rs.next()) {
                String tituloSerie = rs.getString("titulo");
                String nombreCreador = rs.getString("nombre");
                String nacionalidadCreador = rs.getString("nacionalidad");
                resultados.append(String.format("%-40s %-30s %-20s%n", tituloSerie, nombreCreador, nacionalidadCreador));
            }

            JTextArea textArea = new JTextArea(resultados.toString());
            textArea.setEditable(false);
            textArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
            JScrollPane scrollPane = new JScrollPane(textArea);

            JOptionPane.showMessageDialog(null, scrollPane, "Resultados del JOIN", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /* Seleccionamos las siguientes columnas: El titulo de la serie, el numero de temporadas y el titulo del capitulo
        Extraemos los datos de la tabla principal denominada 'Series'
        Hacemos un JOIN de la tabla temporadas con la de serie
        En el ON, hacemos que el id_serie de la tabla series, sea igual al series_id de la tabla temporadas
        En el segundo JOIN, lo hacemos de la tabla capitulos con la de temporadas
        Con el ON, lo que hacemos es que el id_temporada de la tabla temporada sea igual a que temporadas_id de la tabla capitulos y el series_id de las temporadas sea
        igual al temporadas_series de la tabla capitulos
    
        El JOIN muestra el titulo de la serie, el numero de las temporadas mas el titulo de todos los capitulos de la serie*/
    private void realizarJoinSeriesTemporadasCapitulos() {
        String tercerJoin = "SELECT series.titulo, temporadas.num_temporada, capitulos.titulo_capitulo "
                + "FROM series "
                + "JOIN temporadas ON series.id_serie = temporadas.series_id "
                + "JOIN capitulos ON temporadas.id_temporada = capitulos.temporadas_id AND temporadas.series_id = capitulos.temporadas_series";

        StringBuilder resultados = new StringBuilder();
        try ( PreparedStatement pstmt = dbConnection.prepareStatement(tercerJoin);  ResultSet rs = pstmt.executeQuery()) {
            // Encabezados y separadores
            String header = String.format("%-40s %-20s %-40s%n", "Título de la Serie", "Número de Temporada", "Título del Capítulo");
            resultados.append(header);
            resultados.append(String.format("%-40s %-20s %-40s%n", "------------------", "------------------", "------------------"));

            // Datos
            while (rs.next()) {
                String tituloSerie = rs.getString("titulo");
                int numeroTemporada = rs.getInt("num_temporada");
                String tituloCapitulo = rs.getString("titulo_capitulo");
                resultados.append(String.format("%-40s %-20d %-40s%n", tituloSerie, numeroTemporada, tituloCapitulo));
            }

            // Uso de JTextArea y JScrollPane para una mejor presentación
            JTextArea textArea = new JTextArea(resultados.toString());
            textArea.setEditable(false);
            textArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
            JScrollPane scrollPane = new JScrollPane(textArea);

            JOptionPane.showMessageDialog(null, scrollPane, "Resultados del JOIN", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // M É T O D O  L I K E
    // Selecciona todos los datos de una tabla cuando se cumpla tal excepcion.
    private void realizarLike() {
        try {
            // Obtener todas las tablas de la base de datos
            DatabaseMetaData metaData = dbConnection.getMetaData();
            ResultSet tables = metaData.getTables(null, null, "%", new String[]{"TABLE"});
            ArrayList<String> nombresTablas = new ArrayList<>();
            while (tables.next()) {
                String tableCatalog = tables.getString("TABLE_CAT");
                if ("bdpeliculasseries".equals(tableCatalog)) {
                    nombresTablas.add(tables.getString("TABLE_NAME"));
                }
            }

            // Seleccionar la tabla
            String tablaSeleccionada = (String) JOptionPane.showInputDialog(
                    null,
                    "Selecciona el nombre de la tabla:",
                    "Seleccion tabla",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    nombresTablas.toArray(),
                    nombresTablas.get(0)
            );

            // Obtener todos los nombres de las columnas de la tabla elegida
            ResultSet columns = metaData.getColumns(null, "bdpeliculasseries", tablaSeleccionada, "%");
            ArrayList<String> nombredelasColumnas = new ArrayList<>();
            while (columns.next()) {
                nombredelasColumnas.add(columns.getString("COLUMN_NAME"));
            }

            // Seleccionar una columna de la tabla seleccionada
            String columnaSeleccionada = (String) JOptionPane.showInputDialog(
                    null,
                    "Seleccione una columna:",
                    "Seleccion columna",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    nombredelasColumnas.toArray(),
                    nombredelasColumnas.get(0)
            );

            // Pedir el patrón LIKE
            String patrondelLike = JOptionPane.showInputDialog(null, "Introduzca el patrón LIKE: 'Ejemplo: A%'");

            // Ejecutar la consulta
            String sentenciaLike = "SELECT * FROM " + tablaSeleccionada + " WHERE " + columnaSeleccionada + " LIKE ?";
            PreparedStatement pstmt = dbConnection.prepareStatement(sentenciaLike);
            pstmt.setString(1, patrondelLike);
            ResultSet rs = pstmt.executeQuery();

            // CÓDIGO PARA HACERLO MÁS BONITO
            // Mostrar los resultados de la consulta
            StringBuilder resultados = new StringBuilder();
            ResultSetMetaData rsMetaData = rs.getMetaData();
            int columnCount = rsMetaData.getColumnCount();

            // Encabezados de columnas
            for (int i = 1; i <= columnCount; i++) {
                resultados.append(String.format("%-20s", rsMetaData.getColumnName(i)));
            }
            resultados.append("\n");

            // Línea separadora
            for (int i = 1; i <= columnCount; i++) {
                resultados.append(String.format("%-20s", "--------------------"));
            }
            resultados.append("\n");

            // Datos de las filas
            while (rs.next()) {
                for (int i = 1; i <= columnCount; i++) {
                    resultados.append(String.format("%-20s", rs.getString(i)));
                }
                resultados.append("\n");
            }

            JTextArea textArea = new JTextArea(resultados.toString());
            textArea.setEditable(false);
            textArea.setFont(new Font("Monospaced", Font.PLAIN, 12));
            JScrollPane scrollPane = new JScrollPane(textArea);

            JOptionPane.showMessageDialog(null, scrollPane, "Resultados de la Consulta", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    // M E T O D O  R E A L I Z A R  G R O U P  B Y
    private void realizarGroupBy() {
        try {
            // Hace que se obtengan todas las tablas de la base de datos
            DatabaseMetaData metaData = dbConnection.getMetaData();
            ResultSet tablas = metaData.getTables(null, null, "%", new String[]{"TABLE"});
            ArrayList<String> nombresTablas = new ArrayList<>();
            while (tablas.next()) {
                String tableCatalog = tablas.getString("TABLE_CAT");
                if ("bdpeliculasseries".equals(tableCatalog)) {
                    nombresTablas.add(tablas.getString("TABLE_NAME"));
                }
            }

            // Seleccionamos la tabla
            String tablaSeleccionada = (String) JOptionPane.showInputDialog(
                    null,
                    "Selecciona el nombre de la tabla:",
                    "Elección de la tabla",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    nombresTablas.toArray(),
                    nombresTablas.get(0)
            );

            // Obtiene todos los nombres de todas las columnas de la tabla elegida
            ResultSet columns = metaData.getColumns(null, "bdpeliculasseries", tablaSeleccionada, "%");
            ArrayList<String> nombresColumnas = new ArrayList<>();
            while (columns.next()) {
                nombresColumnas.add(columns.getString("COLUMN_NAME"));
            }

            // Seleccionamos una columna de la tabla seleccionada anteriormente
            String columnaSeleccionada = (String) JOptionPane.showInputDialog(
                    null,
                    "Seleccione una columna:",
                    "Seleccion columna",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    nombresColumnas.toArray(),
                    nombresColumnas.get(0)
            );

            String query = "SELECT " + columnaSeleccionada
                    + " FROM " + tablaSeleccionada + " GROUP BY " + columnaSeleccionada;
            PreparedStatement pstmt = dbConnection.prepareStatement(query);
            ResultSet rs = pstmt.executeQuery();

            // Muestra los resultados deseados.
            StringBuilder resultados = new StringBuilder();
            ResultSetMetaData rsMetaData = rs.getMetaData();
            int columnCount = rsMetaData.getColumnCount();

            // Añade el número de las columnas
            for (int i = 1; i <= columnCount; i++) {
                resultados.append(String.format("%-30s", rsMetaData.getColumnName(i)));
            }
            resultados.append("\n");

            // Añadir separador
            resultados.append("-".repeat(30 * columnCount));
            resultados.append("\n");

            // Añade cada fila de cada registro
            while (rs.next()) {
                for (int i = 1; i <= columnCount; i++) {
                    resultados.append(String.format("%-30s", rs.getString(i)));
                }
                resultados.append("\n");
            }

            JOptionPane.showMessageDialog(null, resultados.toString(), "Resultados de la Consulta", JOptionPane.INFORMATION_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bingeboxdb;

import javax.swing.JOptionPane;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

/**
 *
 * @author MEDAC
 */
public class UpdateObjetos extends javax.swing.JFrame {

    /**
     * Creates new form UpdateObjetos
     */
    public UpdateObjetos() {
        setTitle("BingeBox Database");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabelInserciones = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jLabelActors = new javax.swing.JLabel();
        jLabelActors1 = new javax.swing.JLabel();
        jLabelActors2 = new javax.swing.JLabel();
        jLabelActors3 = new javax.swing.JLabel();
        jLabelActors4 = new javax.swing.JLabel();
        jLabelActors5 = new javax.swing.JLabel();
        jLabelActors6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(846, 647));

        jPanel1.setBackground(new java.awt.Color(102, 0, 0));

        jLabelInserciones.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabelInserciones.setForeground(new java.awt.Color(255, 255, 255));
        jLabelInserciones.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelInserciones.setText("U P D A T E");

        jButton8.setBackground(new java.awt.Color(255, 255, 255));
        jButton8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton8.setForeground(new java.awt.Color(0, 0, 0));
        jButton8.setText("Volver");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabelActors.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelActors.setForeground(new java.awt.Color(255, 255, 255));
        jLabelActors.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelActors.setText("Actors");

        jLabelActors1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelActors1.setForeground(new java.awt.Color(255, 255, 255));
        jLabelActors1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelActors1.setText("Peliculas");

        jLabelActors2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelActors2.setForeground(new java.awt.Color(255, 255, 255));
        jLabelActors2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelActors2.setText("Series");

        jLabelActors3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelActors3.setForeground(new java.awt.Color(255, 255, 255));
        jLabelActors3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelActors3.setText("Directors");

        jLabelActors4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelActors4.setForeground(new java.awt.Color(255, 255, 255));
        jLabelActors4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelActors4.setText("Temporadas");

        jLabelActors5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelActors5.setForeground(new java.awt.Color(255, 255, 255));
        jLabelActors5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelActors5.setText("Capitulos");

        jLabelActors6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabelActors6.setForeground(new java.awt.Color(255, 255, 255));
        jLabelActors6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelActors6.setText("Creador de la serie");

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("Actors");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 255));
        jButton2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 0, 0));
        jButton2.setText("Peliculas");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton3.setForeground(new java.awt.Color(0, 0, 0));
        jButton3.setText("Series");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 255, 255));
        jButton4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton4.setForeground(new java.awt.Color(0, 0, 0));
        jButton4.setText("Directors");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(255, 255, 255));
        jButton5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(0, 0, 0));
        jButton5.setText("Temporadas");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(255, 255, 255));
        jButton6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton6.setForeground(new java.awt.Color(0, 0, 0));
        jButton6.setText("Capitulos");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(255, 255, 255));
        jButton7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton7.setForeground(new java.awt.Color(0, 0, 0));
        jButton7.setText("Creador de la Serie");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabelActors, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabelActors1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelActors3)
                                    .addComponent(jLabelActors2)
                                    .addComponent(jLabelActors4))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(86, 86, 86)
                                        .addComponent(jLabelActors6))
                                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)))))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jLabelActors5, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                            .addGap(210, 210, 210)
                            .addComponent(jLabelInserciones, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(48, 48, 48))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabelInserciones, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelActors, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelActors5)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelActors1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelActors2)
                            .addComponent(jButton3))
                        .addGap(47, 47, 47))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabelActors6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelActors3)
                    .addComponent(jButton4))
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jLabelActors4))
                .addGap(18, 18, 18)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // B O T O N  V O L V E R
    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        InterfazHibernate interfaz = new InterfazHibernate();
        interfaz.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        updateActors();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        updateSeries();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        updateDirectors();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        updateTemporadas();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        updateCapitulos();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        updateCreadorSerie();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        updatePeliculas();
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateObjetos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelActors;
    private javax.swing.JLabel jLabelActors1;
    private javax.swing.JLabel jLabelActors2;
    private javax.swing.JLabel jLabelActors3;
    private javax.swing.JLabel jLabelActors4;
    private javax.swing.JLabel jLabelActors5;
    private javax.swing.JLabel jLabelActors6;
    private javax.swing.JLabel jLabelInserciones;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
    // M E T O D O S  U P D A T E
    private void updateActors() {
        // Crear un SessionFactory
        SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Actors_NaM.class).buildSessionFactory();
        Session session = instancia.openSession();

        Integer id_actor = null;
        boolean validInput = false;
        while (!validInput) {
            try {
                String idactor_Str = JOptionPane.showInputDialog("Introduce el ID del actor:");
                id_actor = Integer.parseInt(idactor_Str);
                validInput = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un ID válido del actor.");
            }
        }

        String nombre_actor = JOptionPane.showInputDialog("Introduce el nombre del actor:");
        String nacionalidad_actor = JOptionPane.showInputDialog("Introduce la nacionalidad del actor:");
        String genero_actor = JOptionPane.showInputDialog("Introduce el género del actor/actriz:");

        Actors_NaM a = session.get(Actors_NaM.class, id_actor);
        try {
            // Actualizar los valores del objeto
            if (a != null) {
                a.setNombre_actor(nombre_actor);
                a.setNacionalidadActor(nacionalidad_actor);
                a.setGenero_actor(genero_actor);

                // Iniciar transacción, actualizar el objeto y confirmar la transacción
                session.beginTransaction();
                session.update(a);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro actualizado en la tabla Actores");
            } else {
                JOptionPane.showMessageDialog(null, "El actor con el ID proporcionado no existe");
            }
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    private void updateSeries() {
        // Crear un SessionFactory
        SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Series_1aN.class).buildSessionFactory();
        Session session = instancia.openSession();

        Integer id_serie = null;
        boolean validInput = false;
        while (!validInput) {
            try {
                String id_serieStr = JOptionPane.showInputDialog("Introduce el ID de la serie:");
                id_serie = Integer.parseInt(id_serieStr);
                validInput = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un ID de alguna serie.");
            }
        }

        String titulo = JOptionPane.showInputDialog("Introduce el titulo de la serie:");
        String genero = JOptionPane.showInputDialog("Introduce el género de la serie:");
        String comienzo_serie = JOptionPane.showInputDialog("Introduce cuando comenzó de la serie:");
        String final_serie = JOptionPane.showInputDialog("Introduce cuando acabó la serie:");
        String pais_serie = JOptionPane.showInputDialog("Introduce el país de la serie:");
        Integer num_temporadas = null;
        boolean validInput2 = false;
        while (!validInput2) {
            try {
                String num_temporadasStr = JOptionPane.showInputDialog("Introduce el número de temporadas de la serie:");
                num_temporadas = Integer.parseInt(num_temporadasStr);
                validInput2 = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un número válido para las temporadas.");
            }
        }

        Integer num_capitulos = null;
        boolean validInput3 = false;
        while (!validInput3) {
            try {
                String num_capitulosStr = JOptionPane.showInputDialog("Introduce el número de capítulos de la serie:");
                num_capitulos = Integer.parseInt(num_capitulosStr);
                validInput3 = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un número válido para los capítulos.");
            }
        }

        Series_1aN s = session.get(Series_1aN.class, id_serie);
        try {
            // Actualizar los valores del objeto
            if (s != null) {
                s.setTitulo(titulo);
                s.setGenero(genero);
                s.setComienzo_serie(comienzo_serie);
                s.setFinal_serie(final_serie);
                s.setPais_serie(pais_serie);
                s.setNum_temporadas(num_temporadas);
                s.setNum_capitulos(num_capitulos);

                // Iniciar transacción, actualizar el objeto y confirmar la transacción
                session.beginTransaction();
                session.update(s);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro actualizado en la tabla Series");
            } else {
                JOptionPane.showMessageDialog(null, "La serie con el ID proporcionado no existe");
            }
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    private void updateDirectors() {
        // Crear un SessionFactory
        SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Directors_NaM.class).buildSessionFactory();
        Session session = instancia.openSession();

        Integer id_director = null;
        boolean validInput = false;
        while (!validInput) {
            try {
                String iddirectorStr = JOptionPane.showInputDialog("Introduce el ID del director:");
                id_director = Integer.parseInt(iddirectorStr);
                validInput = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un ID válido del actor.");
            }
        }

        String nombre_director = JOptionPane.showInputDialog("Introduce el nombre del director:");
        String nacionalidad_director = JOptionPane.showInputDialog("Introduce la nacionalidad del director:");
        String genero_director = JOptionPane.showInputDialog("Introduce el género del director:");

        Directors_NaM d = session.get(Directors_NaM.class, id_director);
        try {
            // Actualizar los valores del objeto
            if (d != null) {
                d.setNombre(nombre_director);
                d.setNacionalidad(nacionalidad_director);
                d.setGenero(genero_director);

                // Iniciar transacción, actualizar el objeto y confirmar la transacción
                session.beginTransaction();
                session.update(d);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro actualizado en la tabla Directors");
            } else {
                JOptionPane.showMessageDialog(null, "El actor con el ID proporcionado no existe");
            }
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    private void updateTemporadas() {
        // Crear un SessionFactory
        SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Temporadas_1aN.class).buildSessionFactory();
        Session session = instancia.openSession();

        Integer id_temporada = null;
        boolean validInput = false;
        while (!validInput) {
            try {
                String idactor_Str = JOptionPane.showInputDialog("Introduce el ID de la temporada:");
                id_temporada = Integer.parseInt(idactor_Str);
                validInput = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un ID válido de la temporada.");
            }
        }

        Integer num_temporada = null;
        boolean validInput2 = false;
        while (!validInput2) {
            try {
                String num_temporadaStr = JOptionPane.showInputDialog("Introduce el número de la temporada:");
                num_temporada = Integer.parseInt(num_temporadaStr);
                validInput2 = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un número valido de temporada.");
            }
        }

        Integer año_estreno = null;
        boolean validInput3 = false;
        while (!validInput3) {
            try {
                String año_estrenoStr = JOptionPane.showInputDialog("Introduce el año de estreno de la temporada:");
                año_estreno = Integer.parseInt(año_estrenoStr);
                validInput3 = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce año de estreno válido.");
            }
        }

        Integer num_episodios = null;
        boolean validInput4 = false;
        while (!validInput4) {
            try {
                String num_episodiosStr = JOptionPane.showInputDialog("Introduce el número de episodios:");
                num_episodios = Integer.parseInt(num_episodiosStr);
                validInput4 = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un número válido de episodios.");
            }
        }

        Temporadas_1aN t = session.get(Temporadas_1aN.class, id_temporada);
        try {
            // Actualizar los valores del objeto
            if (t != null) {
                t.setNum_temporada(num_temporada);
                t.setAño_estreno(año_estreno);
                t.setNum_episodios(num_episodios);

                // Iniciar transacción, actualizar el objeto y confirmar la transacción
                session.beginTransaction();
                session.update(t);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro actualizado en la tabla Temporadas");
            } else {
                JOptionPane.showMessageDialog(null, "La temporada con el ID proporcionado no existe");
            }
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    private void updateCapitulos() {
        // Crear un SessionFactory
        SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Capitulos.class).buildSessionFactory();
        Session session = instancia.openSession();

        Integer id_capitulo = null;
        boolean validInput = false;
        while (!validInput) {
            try {
                String idcapituloStr = JOptionPane.showInputDialog("Introduce el ID del capitulo:");
                id_capitulo = Integer.parseInt(idcapituloStr);
                validInput = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un ID válido del capítulo.");
            }
        }

        String titulo_capitulo = JOptionPane.showInputDialog("Introduce el título del capítulo:");

        Integer numero_capitulo = null;
        boolean validInput2 = false;
        while (!validInput2) {
            try {
                String num_capituloStr = JOptionPane.showInputDialog("Introduce el número del capítulo:");
                numero_capitulo = Integer.parseInt(num_capituloStr);
                validInput2 = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un número.");
            }
        }
        String duracion_episodio = JOptionPane.showInputDialog("Introduce la duración del episodio:");
        String director_episodio = JOptionPane.showInputDialog("Introduce el director del episodio:");
        String guionista_episodio = JOptionPane.showInputDialog("Introduce el guionista del episodio:");

        Capitulos c = session.get(Capitulos.class, id_capitulo);
        try {
            // Actualizar los valores del objeto
            if (c != null) {
                c.setTitulo_capitulo(titulo_capitulo);
                c.setNumero_episodio(numero_capitulo);
                c.setDuracion_episodio(duracion_episodio);
                c.setDirector_episodio(director_episodio);
                c.setGuionista_episodio(guionista_episodio);

                // Iniciar transacción, actualizar el objeto y confirmar la transacción
                session.beginTransaction();
                session.update(c);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro actualizado en la tabla Directors");
            } else {
                JOptionPane.showMessageDialog(null, "El actor con el ID proporcionado no existe");
            }
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    private void updateCreadorSerie() {
        // Crear un SessionFactory
        SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Creador_Serie_NaM.class).buildSessionFactory();
        Session session = instancia.openSession();

        Integer idcreador_serie = null;
        boolean validInput = false;
        while (!validInput) {
            try {
                String idactor_Str = JOptionPane.showInputDialog("Introduce el ID del creador:");
                idcreador_serie = Integer.parseInt(idactor_Str);
                validInput = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un ID válido.");
            }
        }

        String nombre_creador = JOptionPane.showInputDialog("Introduce el nombre del creador:");
        String nacionalidad_creador = JOptionPane.showInputDialog("Introduce la nacionalidad del creador:");
        String genero_creador = JOptionPane.showInputDialog("Introduce el género del creador:");

        Creador_Serie_NaM cs = session.get(Creador_Serie_NaM.class, idcreador_serie);
        try {
            // Actualizar los valores del objeto
            if (cs != null) {
                cs.setNombre(nombre_creador);
                cs.setNacionalidad(nacionalidad_creador);
                cs.setGenero(genero_creador);

                // Iniciar transacción, actualizar el objeto y confirmar la transacción
                session.beginTransaction();
                session.update(cs);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro actualizado en la tabla creador_serie");
            } else {
                JOptionPane.showMessageDialog(null, "El creador con el ID proporcionado no existe");
            }
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    private void updatePeliculas() {
        // Crear un SessionFactory
        SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Peliculas_NaM.class).buildSessionFactory();
        Session session = instancia.openSession();

        Integer id_pelicula = null;
        boolean validInput = false;
        while (!validInput) {
            try {
                String idactor_Str = JOptionPane.showInputDialog("Introduce el ID del creador:");
                id_pelicula = Integer.parseInt(idactor_Str);
                validInput = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un ID válido.");
            }
        }

        String titulo = JOptionPane.showInputDialog("Introduce el título de la película:");
        String genero = JOptionPane.showInputDialog("Introduce el genero de la película:");
        String duracion = JOptionPane.showInputDialog("Introduce la duración de la película:");
        String rating = JOptionPane.showInputDialog("Introduce el rating de la película:");
        String pais_pelicula = JOptionPane.showInputDialog("Introduce el país de la película:");

        Integer presupuesto = null;
        boolean validInput2 = false;
        while (!validInput2) {
            try {
                String presupuestoStr = JOptionPane.showInputDialog("Introduce el presupuesto de la película:");
                presupuesto = Integer.parseInt(presupuestoStr);
                validInput2 = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce números.");
            }
        }

        Peliculas_NaM p = session.get(Peliculas_NaM.class, id_pelicula);
        try {
            // Actualizar los valores del objeto
            if (p != null) {
                p.setTitulo(titulo);
                p.setGenero(genero);
                p.setDuracion(duracion);
                p.setRating(rating);
                p.setPais_pelicula(pais_pelicula);
                p.setPresupuesto(presupuesto);

                // Iniciar transacción, actualizar el objeto y confirmar la transacción
                session.beginTransaction();
                session.update(p);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro actualizado en la tabla creador_serie");
            } else {
                JOptionPane.showMessageDialog(null, "El creador con el ID proporcionado no existe");
            }
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }
}

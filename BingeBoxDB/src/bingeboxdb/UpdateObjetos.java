/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package bingeboxdb;

import java.awt.Dimension;
import java.awt.Toolkit;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;

/**
 *
 * @author MEDAC
 */
public class UpdateObjetos extends javax.swing.JFrame {

    /**
     * Creates new form UpdateObjetos
     */
    public UpdateObjetos() {
        this.setSize(800, 600);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

        int x = (screenSize.width - this.getWidth()) / 2;
        int y = (screenSize.height - this.getHeight()) / 2;

        this.setLocation(x, y);
        setTitle("BingeBox Database - Update");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButtonActors = new javax.swing.JButton();
        jButtonPeliculas = new javax.swing.JButton();
        jButtonSeries = new javax.swing.JButton();
        jButtonDirectors = new javax.swing.JButton();
        jButtonTemporadas = new javax.swing.JButton();
        jButtonCapitulos = new javax.swing.JButton();
        jButtonCreadorSerie = new javax.swing.JButton();
        jButtonDireccionPelicula = new javax.swing.JButton();
        jButtonParticipacionActorPel = new javax.swing.JButton();
        jButtonParticipacionActorSerie = new javax.swing.JButton();
        jButtonCreacionSeries = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jButtonDelete = new javax.swing.JButton();
        jButtonVolver = new javax.swing.JButton();
        jButtonSave = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(846, 647));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(new java.awt.Color(204, 255, 255));

        jButtonActors.setBackground(new java.awt.Color(102, 0, 0));
        jButtonActors.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonActors.setForeground(new java.awt.Color(255, 255, 255));
        jButtonActors.setText("Actors");
        jButtonActors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActorsActionPerformed(evt);
            }
        });

        jButtonPeliculas.setBackground(new java.awt.Color(102, 0, 0));
        jButtonPeliculas.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonPeliculas.setForeground(new java.awt.Color(255, 255, 255));
        jButtonPeliculas.setText("Peliculas");
        jButtonPeliculas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPeliculasActionPerformed(evt);
            }
        });

        jButtonSeries.setBackground(new java.awt.Color(102, 0, 0));
        jButtonSeries.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonSeries.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSeries.setText("Series");
        jButtonSeries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSeriesActionPerformed(evt);
            }
        });

        jButtonDirectors.setBackground(new java.awt.Color(102, 0, 0));
        jButtonDirectors.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonDirectors.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDirectors.setText("Directors");
        jButtonDirectors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDirectorsActionPerformed(evt);
            }
        });

        jButtonTemporadas.setBackground(new java.awt.Color(102, 0, 0));
        jButtonTemporadas.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonTemporadas.setForeground(new java.awt.Color(255, 255, 255));
        jButtonTemporadas.setText("Temporadas");
        jButtonTemporadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonTemporadasActionPerformed(evt);
            }
        });

        jButtonCapitulos.setBackground(new java.awt.Color(102, 0, 0));
        jButtonCapitulos.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonCapitulos.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCapitulos.setText("Capitulos");
        jButtonCapitulos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCapitulosActionPerformed(evt);
            }
        });

        jButtonCreadorSerie.setBackground(new java.awt.Color(102, 0, 0));
        jButtonCreadorSerie.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonCreadorSerie.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCreadorSerie.setText("Creador");
        jButtonCreadorSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreadorSerieActionPerformed(evt);
            }
        });

        jButtonDireccionPelicula.setBackground(new java.awt.Color(102, 0, 0));
        jButtonDireccionPelicula.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonDireccionPelicula.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDireccionPelicula.setText("Direccion pelicula");
        jButtonDireccionPelicula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDireccionPeliculaActionPerformed(evt);
            }
        });

        jButtonParticipacionActorPel.setBackground(new java.awt.Color(102, 0, 0));
        jButtonParticipacionActorPel.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonParticipacionActorPel.setForeground(new java.awt.Color(255, 255, 255));
        jButtonParticipacionActorPel.setText("P. Actor Pel√≠cula");
        jButtonParticipacionActorPel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParticipacionActorPelActionPerformed(evt);
            }
        });

        jButtonParticipacionActorSerie.setBackground(new java.awt.Color(102, 0, 0));
        jButtonParticipacionActorSerie.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonParticipacionActorSerie.setForeground(new java.awt.Color(255, 255, 255));
        jButtonParticipacionActorSerie.setText("P. Actor Serie");
        jButtonParticipacionActorSerie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonParticipacionActorSerieActionPerformed(evt);
            }
        });

        jButtonCreacionSeries.setBackground(new java.awt.Color(102, 0, 0));
        jButtonCreacionSeries.setFont(new java.awt.Font("sansserif", 0, 18)); // NOI18N
        jButtonCreacionSeries.setForeground(new java.awt.Color(255, 255, 255));
        jButtonCreacionSeries.setText("Creacion series");
        jButtonCreacionSeries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCreacionSeriesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButtonDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(68, 68, 68)
                        .addComponent(jButtonDireccionPelicula)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonCreadorSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonPeliculas, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonCapitulos, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonActors, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(68, 68, 68)
                                .addComponent(jButtonTemporadas, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 89, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonParticipacionActorPel)
                            .addComponent(jButtonParticipacionActorSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonCreacionSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonActors, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonTemporadas, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonParticipacionActorPel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPeliculas, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCapitulos, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonParticipacionActorSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonCreadorSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonCreacionSeries, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDirectors, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDireccionPelicula, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(204, 0, 51));
        jPanel3.setForeground(new java.awt.Color(153, 0, 0));

        jButtonDelete.setBackground(new java.awt.Color(102, 0, 0));
        jButtonDelete.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jButtonDelete.setForeground(new java.awt.Color(255, 255, 255));
        jButtonDelete.setText("DELETE");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jButtonVolver.setBackground(new java.awt.Color(102, 0, 0));
        jButtonVolver.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jButtonVolver.setForeground(new java.awt.Color(255, 255, 255));
        jButtonVolver.setText("VOLVER");
        jButtonVolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVolverActionPerformed(evt);
            }
        });

        jButtonSave.setBackground(new java.awt.Color(102, 0, 0));
        jButtonSave.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jButtonSave.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSave.setText("SAVE");
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonDelete, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonVolver, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButtonSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(jButtonSave, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jButtonDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jButtonVolver, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 0, 51));

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 48)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("UPDATE");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(120, 120, 120)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    // B O T O N  U P D A T E  E N  A C T O R S
    private void jButtonActorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActorsActionPerformed
        updateActors();
    }//GEN-LAST:event_jButtonActorsActionPerformed
    // B O T O N  U P D A T E  E N  P E L I C U L A S
    private void jButtonPeliculasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPeliculasActionPerformed
        updatePeliculas();
    }//GEN-LAST:event_jButtonPeliculasActionPerformed
    // B O T O N  U P D A T E  E N  S E R I E S
    private void jButtonSeriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSeriesActionPerformed
        updateSeries();
    }//GEN-LAST:event_jButtonSeriesActionPerformed
    // B O T O N  U P D A T E  E N  D I R E C T O R S
    private void jButtonDirectorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDirectorsActionPerformed
        updateDirectors();
    }//GEN-LAST:event_jButtonDirectorsActionPerformed
    // B O T O N  U P D A T E  E N  T E M P O R A D A S
    private void jButtonTemporadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonTemporadasActionPerformed
        updateTemporadas();
    }//GEN-LAST:event_jButtonTemporadasActionPerformed
    // B O T O N  U P D A T E  E N  C A P I T U L O S
    private void jButtonCapitulosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCapitulosActionPerformed
        updateCapitulos();
    }//GEN-LAST:event_jButtonCapitulosActionPerformed
    // B O T O N  U P D A T E  E N  C R E A D O R  S E R I E
    private void jButtonCreadorSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreadorSerieActionPerformed
        updateCreadorSerie();
    }//GEN-LAST:event_jButtonCreadorSerieActionPerformed
    // B O T O N  I R  A  D E L E T E
    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        DeleteObjetos interfaz = new DeleteObjetos();
        interfaz.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButtonDeleteActionPerformed
    // B O T O N  V O L V E R  A  L A  V E N T A N A  P R I N C I P A L
    private void jButtonVolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVolverActionPerformed
        InterfazHibernate interfaz = new InterfazHibernate();
        interfaz.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButtonVolverActionPerformed
    // B O T O N  I R  A  S A V E
    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        InsertarObjetos interfaz = new InsertarObjetos();
        interfaz.setVisible(true);
        dispose();
    }//GEN-LAST:event_jButtonSaveActionPerformed
    // B O T O N  U P D A T E  E N  D I R E C C I O N  P E L I C U L A
    private void jButtonDireccionPeliculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDireccionPeliculaActionPerformed
        updateDireccionPelicula();
    }//GEN-LAST:event_jButtonDireccionPeliculaActionPerformed
    // B O T O N  U P D A T E  E N  P A R T I C I P A C I O N  A C T O R  P E L I C U L A
    private void jButtonParticipacionActorPelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonParticipacionActorPelActionPerformed
        updatePActorPelicula();
    }//GEN-LAST:event_jButtonParticipacionActorPelActionPerformed
    // B O T O N  U P D A T E  E N  P A R T I CI P A C I O N  A C T O R  S E R I E
    private void jButtonParticipacionActorSerieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonParticipacionActorSerieActionPerformed
        updatePActorSerie();
    }//GEN-LAST:event_jButtonParticipacionActorSerieActionPerformed
    // B O T O N  U P D A T E  E N  C R E A C I O N  S E R I E S
    private void jButtonCreacionSeriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCreacionSeriesActionPerformed
        updateCreacionSeries();
    }//GEN-LAST:event_jButtonCreacionSeriesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateObjetos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateObjetos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActors;
    private javax.swing.JButton jButtonCapitulos;
    private javax.swing.JButton jButtonCreacionSeries;
    private javax.swing.JButton jButtonCreadorSerie;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonDireccionPelicula;
    private javax.swing.JButton jButtonDirectors;
    private javax.swing.JButton jButtonParticipacionActorPel;
    private javax.swing.JButton jButtonParticipacionActorSerie;
    private javax.swing.JButton jButtonPeliculas;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSeries;
    private javax.swing.JButton jButtonTemporadas;
    private javax.swing.JButton jButtonVolver;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
    // M E T O D O S  U P D A T E

    /* Metodo denominado 'updateActors' el cual realiza lo siguiente: Primero creamos un SessionFactory de la clase en cuesti√≥n, luego
       usamos JOptionPane para leer los valores introducidos, o convertimos valores que lo requieran a Integer, realizamos la actualizaci√≥n de los valores de la clase.
       Por √∫ltimo empezamos la transacci√≥n y actualizamos el objeto en la base de datos.
     */
    private void updateActors() {
        // Creamos un SessionFactory en la clase de Actors.
        SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Actors_NaM.class).buildSessionFactory();
        Session session = instancia.openSession();

        // Convertimos id_actor a Integer.
        Integer id_actor = null;
        boolean validInput = false;
        while (!validInput) {
            try {
                String idactor_Str = JOptionPane.showInputDialog("Introduce el ID del actor:");
                id_actor = Integer.parseInt(idactor_Str);
                validInput = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un ID v√°lido del actor.");
            }
        }

        // Usamos JOptionPane para leer los valores introducidos.
        String nombre_actor = JOptionPane.showInputDialog("Introduce el nombre del actor:");
        String nacionalidad_actor = JOptionPane.showInputDialog("Introduce la nacionalidad del actor:");
        String genero_actor = JOptionPane.showInputDialog("Introduce el g√©nero del actor/actriz:");

        Actors_NaM a = session.get(Actors_NaM.class, id_actor);
        try {
            // Realizamos la actualizaci√≥n de los valores de la clase.
            if (a != null) {
                a.setNombre_actor(nombre_actor);
                a.setNacionalidadActor(nacionalidad_actor);
                a.setGenero_actor(genero_actor);

                // Empezamos la transacci√≥n y actualizamos el objeto en la base de datos.
                session.beginTransaction();
                session.update(a);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro actualizado en la tabla Actores");
            } else {
                JOptionPane.showMessageDialog(null, "El actor con el ID proporcionado no existe");
            }
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    /* Metodo denominado 'updateSeries' el cual realiza lo siguiente: Primero creamos un SessionFactory de la clase en cuesti√≥n, luego
       usamos JOptionPane para leer los valores introducidos, o convertimos valores que lo requieran a Integer, realizamos la actualizaci√≥n de los valores de la clase.
       Por √∫ltimo empezamos la transacci√≥n y actualizamos el objeto en la base de datos.
     */
    private void updateSeries() {
        // Creamos un SessionFactory en la clase de Series.
        SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Series_1aN.class).buildSessionFactory();
        Session session = instancia.openSession();

        // Convertimos id_serie a Integer.
        Integer id_serie = null;
        boolean validInput = false;
        while (!validInput) {
            try {
                String id_serieStr = JOptionPane.showInputDialog("Introduce el ID de la serie:");
                id_serie = Integer.parseInt(id_serieStr);
                validInput = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un ID de alguna serie.");
            }
        }
        // Usamos JOptionPane para leer los valores introducidos.
        String titulo = JOptionPane.showInputDialog("Introduce el titulo de la serie:");
        String genero = JOptionPane.showInputDialog("Introduce el g√©nero de la serie:");
        String comienzo_serie = JOptionPane.showInputDialog("Introduce cuando comenz√≥ de la serie:");
        String final_serie = JOptionPane.showInputDialog("Introduce cuando acab√≥ la serie:");
        String pais_serie = JOptionPane.showInputDialog("Introduce el pa√≠s de la serie:");

        // Convertimos num_temporadas a Integer.
        Integer num_temporadas = null;
        boolean validInput2 = false;
        while (!validInput2) {
            try {
                String num_temporadasStr = JOptionPane.showInputDialog("Introduce el n√∫mero de temporadas de la serie:");
                num_temporadas = Integer.parseInt(num_temporadasStr);
                validInput2 = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido para las temporadas.");
            }
        }
        // Convertimos num_capitulos a Integer.
        Integer num_capitulos = null;
        boolean validInput3 = false;
        while (!validInput3) {
            try {
                String num_capitulosStr = JOptionPane.showInputDialog("Introduce el n√∫mero de cap√≠tulos de la serie:");
                num_capitulos = Integer.parseInt(num_capitulosStr);
                validInput3 = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido para los cap√≠tulos.");
            }
        }

        Series_1aN s = session.get(Series_1aN.class, id_serie);
        try {
            // Realizamos la actualizaci√≥n de los valores de la clase.
            if (s != null) {
                s.setTitulo(titulo);
                s.setGenero(genero);
                s.setComienzo_serie(comienzo_serie);
                s.setFinal_serie(final_serie);
                s.setPais_serie(pais_serie);
                s.setNum_temporadas(num_temporadas);
                s.setNum_capitulos(num_capitulos);

                // Empezamos la transacci√≥n y actualizamos el objeto en la base de datos.
                session.beginTransaction();
                session.update(s);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro actualizado en la tabla Series");
            } else {
                JOptionPane.showMessageDialog(null, "La serie con el ID proporcionado no existe");
            }
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    /* Metodo denominado 'updateDirectors' el cual realiza lo siguiente: Primero creamos un SessionFactory de la clase en cuesti√≥n, luego
       usamos JOptionPane para leer los valores introducidos, o convertimos valores que lo requieran a Integer, realizamos la actualizaci√≥n de los valores de la clase.
       Por √∫ltimo empezamos la transacci√≥n y actualizamos el objeto en la base de datos.
     */
    private void updateDirectors() {
        // Creamos un SessionFactory en la clase de Directors.
        SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Directors_NaM.class).buildSessionFactory();
        Session session = instancia.openSession();

        // Convertimos id_director a Integer.
        Integer id_director = null;
        boolean validInput = false;
        while (!validInput) {
            try {
                String iddirectorStr = JOptionPane.showInputDialog("Introduce el ID del director:");
                id_director = Integer.parseInt(iddirectorStr);
                validInput = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un ID v√°lido del actor.");
            }
        }

        // Usamos JOptionPane para leer los valores introducidos.
        String nombre_director = JOptionPane.showInputDialog("Introduce el nombre del director:");
        String nacionalidad_director = JOptionPane.showInputDialog("Introduce la nacionalidad del director:");
        String genero_director = JOptionPane.showInputDialog("Introduce el g√©nero del director:");

        Directors_NaM d = session.get(Directors_NaM.class, id_director);
        try {
            // Realizamos la actualizaci√≥n de los valores de la clase.
            if (d != null) {
                d.setNombre(nombre_director);
                d.setNacionalidad(nacionalidad_director);
                d.setGenero(genero_director);

                // Empezamos la transacci√≥n y actualizamos el objeto en la base de datos.
                session.beginTransaction();
                session.update(d);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro actualizado en la tabla Directors");
            } else {
                JOptionPane.showMessageDialog(null, "El actor con el ID proporcionado no existe");
            }
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    /* Metodo denominado 'updateTemporadas' el cual realiza lo siguiente: Primero creamos un SessionFactory de la clase en cuesti√≥n, luego
       usamos JOptionPane para leer los valores introducidos, o convertimos valores que lo requieran a Integer, realizamos la actualizaci√≥n de los valores de la clase.
       Por √∫ltimo empezamos la transacci√≥n y actualizamos el objeto en la base de datos.
     */
    private void updateTemporadas() {
        // Creamos un SessionFactory en la clase de Temporadas.
        SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Temporadas_1aN.class).buildSessionFactory();
        Session session = instancia.openSession();
        // Convertimos id_temporada a Integer.
        Integer id_temporada = null;
        boolean validInput = false;
        while (!validInput) {
            try {
                String idactor_Str = JOptionPane.showInputDialog("Introduce el ID de la temporada:");
                id_temporada = Integer.parseInt(idactor_Str);
                validInput = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un ID v√°lido de la temporada.");
            }
        }
        // Convertimos num_capitulos a Integer.
        Integer num_temporada = null;
        boolean validInput2 = false;
        while (!validInput2) {
            try {
                String num_temporadaStr = JOptionPane.showInputDialog("Introduce el n√∫mero de la temporada:");
                num_temporada = Integer.parseInt(num_temporadaStr);
                validInput2 = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero valido de temporada.");
            }
        }
        // Convertimos a√±o_estreno a Integer.
        Integer a√±o_estreno = null;
        boolean validInput3 = false;
        while (!validInput3) {
            try {
                String a√±o_estrenoStr = JOptionPane.showInputDialog("Introduce el a√±o de estreno de la temporada:");
                a√±o_estreno = Integer.parseInt(a√±o_estrenoStr);
                validInput3 = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce a√±o de estreno v√°lido.");
            }
        }
        // Convertimos num_episodios a Integer.
        Integer num_episodios = null;
        boolean validInput4 = false;
        while (!validInput4) {
            try {
                String num_episodiosStr = JOptionPane.showInputDialog("Introduce el n√∫mero de episodios:");
                num_episodios = Integer.parseInt(num_episodiosStr);
                validInput4 = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero v√°lido de episodios.");
            }
        }

        Temporadas_1aN t = session.get(Temporadas_1aN.class, id_temporada);
        try {
            // Realizamos la actualizaci√≥n de los valores de la clase.
            if (t != null) {
                t.setNum_temporada(num_temporada);
                t.setA√±o_estreno(a√±o_estreno);
                t.setNum_episodios(num_episodios);

                // Empezamos la transacci√≥n y actualizamos el objeto en la base de datos.
                session.beginTransaction();
                session.update(t);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro actualizado en la tabla Temporadas");
            } else {
                JOptionPane.showMessageDialog(null, "La temporada con el ID proporcionado no existe");
            }
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    /* Metodo denominado 'updateCapitulos' el cual realiza lo siguiente: Primero creamos un SessionFactory de la clase en cuesti√≥n, luego
       usamos JOptionPane para leer los valores introducidos, o convertimos valores que lo requieran a Integer, realizamos la actualizaci√≥n de los valores de la clase.
       Por √∫ltimo empezamos la transacci√≥n y actualizamos el objeto en la base de datos.
     */
    private void updateCapitulos() {
        // Creamos un SessionFactory en la clase de Capitulos.
        SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Capitulos.class).buildSessionFactory();
        Session session = instancia.openSession();
        // Convertimos id_capitulo a Integer.
        Integer id_capitulo = null;
        boolean validInput = false;
        while (!validInput) {
            try {
                String idcapituloStr = JOptionPane.showInputDialog("Introduce el ID del capitulo:");
                id_capitulo = Integer.parseInt(idcapituloStr);
                validInput = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un ID v√°lido del cap√≠tulo.");
            }
        }

        // Usamos JOptionPane para leer los valores introducidos.
        String titulo_capitulo = JOptionPane.showInputDialog("Introduce el t√≠tulo del cap√≠tulo:");

        // Convertimos numero_capitulo a Integer.
        Integer numero_capitulo = null;
        boolean validInput2 = false;
        while (!validInput2) {
            try {
                String num_capituloStr = JOptionPane.showInputDialog("Introduce el n√∫mero del cap√≠tulo:");
                numero_capitulo = Integer.parseInt(num_capituloStr);
                validInput2 = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un n√∫mero.");
            }
        }
        // Usamos JOptionPane para leer los valores introducidos.
        String duracion_episodio = JOptionPane.showInputDialog("Introduce la duraci√≥n del episodio:");
        String director_episodio = JOptionPane.showInputDialog("Introduce el director del episodio:");
        String guionista_episodio = JOptionPane.showInputDialog("Introduce el guionista del episodio:");

        Capitulos c = session.get(Capitulos.class, id_capitulo);
        try {
            // Realizamos la actualizaci√≥n de los valores de la clase.
            if (c != null) {
                c.setTitulo_capitulo(titulo_capitulo);
                c.setNumero_episodio(numero_capitulo);
                c.setDuracion_episodio(duracion_episodio);
                c.setDirector_episodio(director_episodio);
                c.setGuionista_episodio(guionista_episodio);

                // Empezamos la transacci√≥n y actualizamos el objeto en la base de datos.
                session.beginTransaction();
                session.update(c);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro actualizado en la tabla Directors");
            } else {
                JOptionPane.showMessageDialog(null, "El actor con el ID proporcionado no existe");
            }
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    /* Metodo denominado 'updateCreadorSerie' el cual realiza lo siguiente: Primero creamos un SessionFactory de la clase en cuesti√≥n, luego
       usamos JOptionPane para leer los valores introducidos, o convertimos valores que lo requieran a Integer, realizamos la actualizaci√≥n de los valores de la clase.
       Por √∫ltimo empezamos la transacci√≥n y actualizamos el objeto en la base de datos.
     */
    private void updateCreadorSerie() {
        // Creamos un SessionFactory en la clase de Creador_Serie.
        SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Creador_Serie_NaM.class).buildSessionFactory();
        Session session = instancia.openSession();

        // Convertimos idcreador_serie a Integer.
        Integer idcreador_serie = null;
        boolean validInput = false;
        while (!validInput) {
            try {
                String idactor_Str = JOptionPane.showInputDialog("Introduce el ID del creador:");
                idcreador_serie = Integer.parseInt(idactor_Str);
                validInput = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un ID v√°lido.");
            }
        }

        // Usamos JOptionPane para leer los valores introducidos.
        String nombre_creador = JOptionPane.showInputDialog("Introduce el nombre del creador:");
        String nacionalidad_creador = JOptionPane.showInputDialog("Introduce la nacionalidad del creador:");
        String genero_creador = JOptionPane.showInputDialog("Introduce el g√©nero del creador:");

        Creador_Serie_NaM cs = session.get(Creador_Serie_NaM.class, idcreador_serie);
        try {
            // Realizamos la actualizaci√≥n de los valores de la clase.
            if (cs != null) {
                cs.setNombre(nombre_creador);
                cs.setNacionalidad(nacionalidad_creador);
                cs.setGenero(genero_creador);

                // Empezamos la transacci√≥n y actualizamos el objeto en la base de datos.
                session.beginTransaction();
                session.update(cs);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro actualizado en la tabla creador_serie");
            } else {
                JOptionPane.showMessageDialog(null, "El creador con el ID proporcionado no existe");
            }
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }

    /* Metodo denominado 'updatePeliculas' el cual realiza lo siguiente: Primero creamos un SessionFactory de la clase en cuesti√≥n, luego
       usamos JOptionPane para leer los valores introducidos, o convertimos valores que lo requieran a Integer, realizamos la actualizaci√≥n de los valores de la clase.
       Por √∫ltimo empezamos la transacci√≥n y actualizamos el objeto en la base de datos.
     */
    private void updatePeliculas() {
        // Creamos un SessionFactory en la clase de Peliculas.
        SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Peliculas_NaM.class).buildSessionFactory();
        Session session = instancia.openSession();

        // Convertimos id_pelicula a Integer.
        Integer id_pelicula = null;
        boolean validInput = false;
        while (!validInput) {
            try {
                String idactor_Str = JOptionPane.showInputDialog("Introduce el ID de la pelicula:");
                id_pelicula = Integer.parseInt(idactor_Str);
                validInput = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce un ID v√°lido.");
            }
        }
        // Usamos JOptionPane para leer los valores introducidos.
        String titulo = JOptionPane.showInputDialog("Introduce el t√≠tulo de la pel√≠cula:");
        String genero = JOptionPane.showInputDialog("Introduce el genero de la pel√≠cula:");
        String duracion = JOptionPane.showInputDialog("Introduce la duraci√≥n de la pel√≠cula:");
        String rating = JOptionPane.showInputDialog("Introduce el rating de la pel√≠cula:");
        String pais_pelicula = JOptionPane.showInputDialog("Introduce el pa√≠s de la pel√≠cula:");

        // Convertimos presupuesto a Integer.
        Integer presupuesto = null;
        boolean validInput2 = false;
        while (!validInput2) {
            try {
                String presupuestoStr = JOptionPane.showInputDialog("Introduce el presupuesto de la pel√≠cula:");
                presupuesto = Integer.parseInt(presupuestoStr);
                validInput2 = true;
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Por favor, introduce n√∫meros.");
            }
        }

        Peliculas_NaM p = session.get(Peliculas_NaM.class, id_pelicula);
        try {
            // Realizamos la actualizaci√≥n de los valores de la clase.
            if (p != null) {
                p.setTitulo(titulo);
                p.setGenero(genero);
                p.setDuracion(duracion);
                p.setRating(rating);
                p.setPais_pelicula(pais_pelicula);
                p.setPresupuesto(presupuesto);

                // Empezamos la transacci√≥n y actualizamos el objeto en la base de datos.
                session.beginTransaction();
                session.update(p);
                session.getTransaction().commit();
                JOptionPane.showMessageDialog(null, "Registro actualizado en la tabla creador_serie");
            } else {
                JOptionPane.showMessageDialog(null, "El creador con el ID proporcionado no existe");
            }
        } catch (HibernateException he) {
            System.out.println(he);
        }
    }
    /* Metodo denominado 'updateDireccionPelicula'
    
    */
    private void updateDireccionPelicula() {
        try {
            // Creamos un SessionFactory en la clase Direccion_Pelicula.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Direccion_Pelicula.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Pasamos direccion_id_pelicula a Integer.
            Integer direccion_id_pelicula = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String idPrincipal = JOptionPane.showInputDialog("Introduce el ID principal:");
                    direccion_id_pelicula = Integer.parseInt(idPrincipal);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID correcto.");
                }
            }
            Direccion_Pelicula direccionPelicula = session.get(Direccion_Pelicula.class, direccion_id_pelicula);

            if (direccionPelicula == null) {
                JOptionPane.showMessageDialog(null, "No se encontr√≥ la Direcci√≥n de Pel√≠cula con el ID proporcionado.");
                session.close();
                return;
            }
            // Pasamos peliculas_id_pelicula a Integer.
            Integer peliculas_id_pelicula = null;
            boolean validInput2 = false;
            while (!validInput2) {
                try {
                    String pidStr = JOptionPane.showInputDialog("Introduce el nuevo ID de la pel√≠cula:");
                    peliculas_id_pelicula = Integer.parseInt(pidStr);
                    validInput2 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID correcto.");
                }
            }
            // Pasamos directors_id_director a Integer.
            Integer directors_id_director = null;
            boolean validInput3 = false;
            while (!validInput3) {
                try {
                    String idDirectorStr = JOptionPane.showInputDialog("Introduce el nuevo ID del director:");
                    directors_id_director = Integer.parseInt(idDirectorStr);
                    validInput3 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID correcto.");
                }
            }

            Peliculas_NaM nuevaPelicula = session.get(Peliculas_NaM.class, peliculas_id_pelicula);
            Directors_NaM nuevoDirector = session.get(Directors_NaM.class, directors_id_director);

            if (nuevaPelicula == null || nuevoDirector == null) {
                JOptionPane.showMessageDialog(null, "No se encontr√≥ la pel√≠cula o el director con los ID proporcionados.");
                session.close();
                return;
            }

            direccionPelicula.setDirector(nuevoDirector);
            direccionPelicula.setPelicula(nuevaPelicula);

            session.beginTransaction();

            session.update(direccionPelicula);

            session.getTransaction().commit();

            JOptionPane.showMessageDialog(null, "Registro actualizado exitosamente en Direccion_Pelicula.");
            session.close();
        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error en la operaci√≥n de base de datos: " + he.getMessage());
        }

    }
    /* Metodo denominado 'updatePActorPelicula'
    
    */
    private void updatePActorPelicula() {
        try {
            // Creamos un SessionFactory en la clase Participacion_Actor_Pelicula.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml")
                    .addAnnotatedClass(Participacion_Actor_Pelicula.class)
                    .buildSessionFactory();
            Session session = instancia.openSession();

            // Convertimos participacion_id a Integer.
            Integer participacion_id = null;
            boolean validInput = false;

            // Pedimos el ID principal de la tabla.
            while (!validInput) {
                try {
                    String idPrincipal = JOptionPane.showInputDialog("Introduce el ID principal:");
                    participacion_id = Integer.parseInt(idPrincipal);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID v√°lido.");
                }
            }

            Participacion_Actor_Pelicula pap = session.get(Participacion_Actor_Pelicula.class, participacion_id);

            if (pap == null) {
                JOptionPane.showMessageDialog(null, "No se encontr√≥ el ID.");
                session.close();
                return;
            }

            // Preguntamos que papel realiza.
            String papel_realiza = JOptionPane.showInputDialog("Introduce el nuevo papel que realizar√° el actor:");

            // Se pregunta si se desea cambiar el ID de la pel√≠cula en cuesti√≥n.
            Integer peliculas_id = null;
            validInput = false;
            while (!validInput) {
                try {
                    String pidStr = JOptionPane.showInputDialog("Introduce el nuevo ID de la pel√≠cula (Si no quieres, dejalo en blanco):");
                    if (!pidStr.trim().isEmpty()) {
                        peliculas_id = Integer.parseInt(pidStr);
                        validInput = true;
                    } else {
                        validInput = true;
                    }
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID v√°lido.");
                }
            }

            if (peliculas_id != null) {
                Peliculas_NaM nuevaPelicula = session.get(Peliculas_NaM.class, peliculas_id);
                if (nuevaPelicula == null) {
                    JOptionPane.showMessageDialog(null, "No se encontr√≥ el ID de la pel√≠cula.");
                    session.close();
                    return;
                }
                pap.setPelicula(nuevaPelicula);
            }

            // Se pregunta si se desea cambiar el ID del actor en cuesti√≥n
            Integer actors_id = null;
            validInput = false;
            while (!validInput) {
                try {
                    String aidStr = JOptionPane.showInputDialog("Introduce el nuevo ID del actor (Si no quieres cambiarlo, dejalo en blanco):");
                    if (!aidStr.trim().isEmpty()) {
                        actors_id = Integer.parseInt(aidStr);
                        validInput = true;
                    } else {
                        validInput = true;
                    }
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID v√°lido.");
                }
            }

            if (actors_id != null) {
                Actors_NaM nuevoActor = session.get(Actors_NaM.class, actors_id);
                if (nuevoActor == null) {
                    JOptionPane.showMessageDialog(null, "No se encontr√≥ el actor con el ID proporcionado.");
                    session.close();
                    return;
                }
                pap.setActor(nuevoActor);
            }

            pap.setPapel_realiza(papel_realiza);

            session.beginTransaction();

            session.update(pap);

            session.getTransaction().commit();

            JOptionPane.showMessageDialog(null, "Registro actualizado exitosamente en la tabla Participacion_Actor_Pelicula.");
            session.close();
        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error en la operaci√≥n de base de datos: " + he.getMessage());
        }

    }
    /* Metodo denominado 'updatePActorSerie'
    
    */
    private void updatePActorSerie() {
        try {
            // Creamos un SessionFactory en la clase Participacion_Actor_Serie.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml").addAnnotatedClass(Participacion_Actor_Serie.class).buildSessionFactory();
            Session session = instancia.openSession();

            // Convertimos series_id a Integer.
            Integer series_id = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String sidStr = JOptionPane.showInputDialog("Introduce el SERIES_ID:");
                    series_id = Integer.parseInt(sidStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID v√°lido.");
                }
            }

            // Convertimos actors_id a Integer.
            Integer actors_id = null;
            boolean validInput2 = false;
            while (!validInput2) {
                try {
                    String aidStr = JOptionPane.showInputDialog("Introduce el ACTORS_ID:");
                    actors_id = Integer.parseInt(aidStr);
                    validInput2 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce un ID v√°lido.");
                }
            }

            String papel_realiza = JOptionPane.showInputDialog("Modifica el papel en cuesti√≥n del actor:");

            Series_1aN serie = session.get(Series_1aN.class, series_id);
            Actors_NaM actor = session.get(Actors_NaM.class, actors_id);

            if (serie == null || actor == null) {
                JOptionPane.showMessageDialog(null, "No se encontr√≥ la serie o el actor.");
                session.close();
                return;
            }

            String select = "FROM Participacion_Actor_Serie pas WHERE series_id = :serie AND actors_id = :actor";
            Participacion_Actor_Serie pas = (Participacion_Actor_Serie) session.createQuery(select)
                    .setParameter("serie", serie)
                    .setParameter("actor", actor)
                    .uniqueResult();

            if (pas != null) {
                pas.setPapel_realiza(papel_realiza);

                session.beginTransaction();
                session.update(pas);
                session.getTransaction().commit();

                JOptionPane.showMessageDialog(null, "Registro actualizado exitosamente en la tabla Participacion_Actor_Serie");
            } else {
                JOptionPane.showMessageDialog(null, "No se encontr√≥ una participaci√≥n existente para el actor y la serie especificados.");
            }

            session.close();
        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error en la operaci√≥n de base de datos: " + he.getMessage());
        }

    }
    /* Metodo denominado 'updateCreacionSeries' 
    
    */
    private void updateCreacionSeries() {
        try {
            // Creamos un SessionFactory en la clase creacion_series.
            SessionFactory instancia = new Configuration().configure("/bingeboxdb/hibernate.cfg.xml")
                    .addAnnotatedClass(creacion_series.class).buildSessionFactory();
            Session session = instancia.openSession();

            Integer creacionSeriesId = null;
            boolean validInput = false;
            while (!validInput) {
                try {
                    String sidStr = JOptionPane.showInputDialog("Introduce el ID principal:");
                    creacionSeriesId = Integer.parseInt(sidStr);
                    validInput = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce ID v√°lido.");
                }
            }
            creacion_series cs = session.get(creacion_series.class, creacionSeriesId);

            if (cs == null) {
                JOptionPane.showMessageDialog(null, "No se encontr√≥ el ID.");
                session.close();
                return;
            }

            Integer series_id = null;
            boolean validInput2 = false;
            while (!validInput2) {
                try {
                    String sidStr = JOptionPane.showInputDialog("Introduce el nuevo ID de la serie:");
                    series_id = Integer.parseInt(sidStr);
                    validInput2 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce ID v√°lido.");
                }
            }

            Integer creador_id = null;
            boolean validInput3 = false;
            while (!validInput3) {
                try {
                    String cidStr = JOptionPane.showInputDialog("Introduce el nuevo ID del creador:");
                    creador_id = Integer.parseInt(cidStr);
                    validInput3 = true;
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Por favor, introduce ID v√°lido.");
                }
            }

            Series_1aN serie = session.get(Series_1aN.class, series_id);
            Creador_Serie_NaM creador = session.get(Creador_Serie_NaM.class, creador_id);

            if (serie == null || creador == null) {
                JOptionPane.showMessageDialog(null, "No se ha encontrado exitosamente la serie o el creador con los ID proporcionados.");
                session.close();
                return;
            }

            cs.setSerie(serie);
            cs.setCreador(creador);

            session.beginTransaction();
            session.update(cs);
            session.getTransaction().commit();

            JOptionPane.showMessageDialog(null, "Registro exitosamente actualizado en la tabla Creacion_Series");

            session.close();
        } catch (HibernateException he) {
            System.out.println(he);
            JOptionPane.showMessageDialog(null, "Error en la operaci√≥n de base de datos: " + he.getMessage());
        }

    }
}
